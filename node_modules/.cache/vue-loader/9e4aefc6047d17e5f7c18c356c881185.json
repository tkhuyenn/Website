{"remainingRequest":"D:\\NEU\\CDTT\\frontend\\Website\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\NEU\\CDTT\\frontend\\Website\\src\\modules\\landing\\components\\LandingBanner.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\NEU\\CDTT\\frontend\\Website\\src\\modules\\landing\\components\\LandingBanner.vue","mtime":1661165378573},{"path":"D:\\NEU\\CDTT\\frontend\\Website\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1660970364629},{"path":"D:\\NEU\\CDTT\\frontend\\Website\\node_modules\\thread-loader\\dist\\cjs.js","mtime":1660970364258},{"path":"D:\\NEU\\CDTT\\frontend\\Website\\node_modules\\babel-loader\\lib\\index.js","mtime":1660970387821},{"path":"D:\\NEU\\CDTT\\frontend\\Website\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1660970364629},{"path":"D:\\NEU\\CDTT\\frontend\\Website\\node_modules\\vue-loader\\lib\\index.js","mtime":1660970394220}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KCmltcG9ydCBmaXJlYmFzZSBmcm9tICdAL3V0aWxzL2ZpcmViYXNlJwppbXBvcnQgZmluZEluZGV4IGZyb20gJ2xvZGFzaC9maW5kSW5kZXgnCmltcG9ydCBmb3JFYWNoIGZyb20gJ2xvZGFzaC9mb3JFYWNoJwppbXBvcnQgSlNFbmNyeXB0IGZyb20gJ2pzZW5jcnlwdCcKaW1wb3J0IHJlcXVlc3QgZnJvbSAnQC9wbHVnaW5zL3JlcXVlc3QnCmltcG9ydCB7IG1hcEdldHRlcnMgfSBmcm9tICd2dWV4JwpleHBvcnQgZGVmYXVsdCB7CiAgbmFtZTogJ0xhbmRpbmdCYW5uZXInLAogIGRhdGEoKSB7CiAgICByZXR1cm4gewogICAgICBwb3B1cFZpZGVvOiBmYWxzZSwKICAgICAgZGF5OiAwLAogICAgICBob3VyOiAwLAogICAgICBtaW51dGU6IDAsCiAgICAgIHNlY29uZDogMCwKICAgICAgbGlzdGVuZXI6IG51bGwsCiAgICAgIGxpc3RSb3VuZDogW10sCiAgICAgIHJvdW5kQ3VycmVudDoge30sCiAgICAgIGlzRW5kT246IGZhbHNlLAogICAgICBwcm9ncmVzc2JhcjogMCwKICAgICAgdGltaW5nOiBudWxsLAogICAgICBzaG93OiBmYWxzZQogICAgfQogIH0sCiAgYXN5bmMgY3JlYXRlZCgpIHsKICAgIC8vIHRoaXMuaXNMb2FkaW5nID0gdHJ1ZTsKICAgIC8vIGF3YWl0IHRoaXMuaGFuZGxlU2lnbkluRmlyZUJhc2UoKQogICAgLy8gYXdhaXQgdGhpcy5oYW5kbGVUdXJuT25GaXJlYmFzZSgpCiAgICB0aGlzLnNob3cgPSB0cnVlCiAgICBjb25zdCBsYW5nID0gd2luZG93LmxvY2FsU3RvcmFnZS5nZXRJdGVtKCdiYy1sYW5nJykKICAgIGlmICghbGFuZykgewogICAgICB3aW5kb3cubG9jYWxTdG9yYWdlLnNldEl0ZW0oJ2JjLWxhbmcnLCAnZW4nKQogICAgfSBlbHNlIHsKICAgICAgdGhpcy5zZWxlY3RMYW5ndWFnZSA9IGxhbmcKICAgIH0KICB9LAogIGRlc3Ryb3llZCgpIHsKICAgIC8vIGNvbnN0IGxlYWRzUmVmID0gZmlyZWJhc2UuZGF0YWJhc2UoKS5yZWYoJ2Nyb3dkc2FsZXNfZGFzaGJvYXJkJykKICAgIGNvbnN0IGxlYWRzUmVmID0gZmlyZWJhc2UuZGF0YWJhc2UoKS5yZWYoJ2Nyb3dkLXNhbGVzJykKICAgIGxlYWRzUmVmLm9mZigndmFsdWUnLCB0aGlzLmxpc3RlbmVyKQogICAgY2xlYXJJbnRlcnZhbCh0aGlzLnRpbWluZykKICB9LAogIGNvbXB1dGVkOiB7CiAgICAuLi5tYXBHZXR0ZXJzKCdiZUF1dGgnLCBbJ2lzTG9naW4nXSksCiAgICBnZXRSb3VuZE51bWJlcigpIHsKICAgICAgcmV0dXJuIHRoaXMucm91bmRDdXJyZW50Py5uYW1lCiAgICB9LAoKICAgIGdldElzRW5kUm91bmQoKSB7CiAgICAgIGNvbnN0IGluZGV4ID0gZmluZEluZGV4KHRoaXMubGlzdFJvdW5kLCBlbG0gPT4gZWxtLmlkID09PSB0aGlzLnJvdW5kQ3VycmVudC5pZCkKICAgICAgaWYgKGluZGV4ID09PSB0aGlzLmxpc3RSb3VuZC5sZW5ndGggLSAxKSB7CiAgICAgICAgcmV0dXJuIHRydWUKICAgICAgfQogICAgICByZXR1cm4gZmFsc2UKICAgIH0KICB9LAogIG1ldGhvZHM6IHsKICAgIC8vIGFzeW5jIGhhbmRsZVNpZ25JbkZpcmVCYXNlKCkgewogICAgLy8gICB0cnkgewogICAgLy8gICAgIGNvbnN0IGRhdGEgPSB7CiAgICAvLyAgICAgICBwYXNzd29yZDogdGhpcy5lbmNyeXB0UGFzc3dvcmQoJyMhQEZpcmViYXNlLXdlYi1jbGllbnRAISMnKQogICAgLy8gICAgIH0KICAgIC8vICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCB0aGlzLmdldFRva2VuKGRhdGEpCiAgICAvLyAgICAgYXdhaXQgZmlyZWJhc2UuYXV0aCgpLnNpZ25JbldpdGhDdXN0b21Ub2tlbihyZXN1bHQuYXV0aFRva2VuKQogICAgLy8gICB9IGNhdGNoIChlcnJvcikgewogICAgLy8gICAgIGNvbnNvbGUubG9nKGVycm9yKQogICAgLy8gICB9CiAgICAvLyB9LAogICAgLy8gZW5jcnlwdFBhc3N3b3JkKHBhc3MpIHsKICAgIC8vICAgY29uc3QgUFVCTElDX0tFWSA9CiAgICAvLyAgICAgJ01JR2ZNQTBHQ1NxR1NJYjNEUUVCQVFVQUE0R05BRENCaVFLQmdRQ2d3MEllT1YwRFpMMVpmenNTU2JaRFJ1OVhQUEJrYjRFVnNGS1lPREZKbkVFTWRWSzNJQmhDeWVob1ViSkZ1Zkl2ZFFENzhMeWZSbzQ2ZkI1QjZrK0VzTEMvNHZvZlFpWXlFL1IxM3IrRmQreHVmVFhweERLa2o1NDRMdGZCZnZzaC9mWUZ4K3ZVSDEvNVh0dUNwbEJYNGNPc0lkTW5pMDI2elp2NDZjbEpzd0lEQVFBQicKICAgIC8vICAgY29uc3QgUlNBRW5jcnlwdCA9IG5ldyBKU0VuY3J5cHQoKQogICAgLy8gICBSU0FFbmNyeXB0LnNldFB1YmxpY0tleShQVUJMSUNfS0VZKQogICAgLy8gICByZXR1cm4gUlNBRW5jcnlwdC5lbmNyeXB0KHBhc3MpCiAgICAvLyB9LAogICAgLy8gYXN5bmMgZ2V0VG9rZW4oZGF0YSkgewogICAgLy8gICB0cnkgewogICAgLy8gICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHJlcXVlc3QucG9zdCgnYXBpL3YxL2ZpcmViYXNlL2F1dGgnLCBkYXRhKQogICAgLy8gICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUocmVzdWx0LmRhdGEuZGF0YSkKICAgIC8vICAgfSBjYXRjaCAoZXJyb3IpIHsKICAgIC8vICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoZXJyb3IpCiAgICAvLyAgIH0KICAgIC8vIH0sCgogICAgYXN5bmMgaGFuZGxlVHVybk9uRmlyZWJhc2UoKSB7CiAgICAgIC8vIGNvbnN0IGxlYWRzUmVmID0gZmlyZWJhc2UuZGF0YWJhc2UoKS5yZWYoJ2Nyb3dkc2FsZXNfZGFzaGJvYXJkJykKICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby10aGlzLWFsaWFzCiAgICAgIC8vIGxldCBfdGhpcyA9IHRoaXMKICAgICAgLy8gdGhpcy5saXN0ZW5lciA9IGxlYWRzUmVmLm9uKCd2YWx1ZScsIGZ1bmN0aW9uIChzbmFwc2hvdCkgewogICAgICAvLyAgIGNvbnN0IHJlc3BvbnNlID0gc25hcHNob3QudmFsKCkKICAgICAgLy8gICBjb25zdCB0b3RhbEludmVzdG9yID0gcmVzcG9uc2UudG90YWxJbnZlc3RvcgogICAgICAvLyAgIC8vIGNvbnN0IHRvdGFsSW52ZXN0b3IgPSBmaWx0ZXIobGlzdENvdW50cnksIGVsbSA9PiBlbG0ubnVtT2ZJbnZlc3RvcikucmVkdWNlKChwcmV2aW91c1ZhbHVlLCBjdXJyZW50VmFsdWUpID0+IHByZXZpb3VzVmFsdWUgKyBjdXJyZW50VmFsdWUubnVtT2ZJbnZlc3RvciwgMCkKICAgICAgLy8gICBfdGhpcy5hcnJUb3RhbEludmVzdG9yID0gKG5ldyBBcnJheSg3ICsgMSAtICh0b3RhbEludmVzdG9yICsgJycpLmxlbmd0aCkuam9pbignMCcpICsgdG90YWxJbnZlc3Rvcikuc3BsaXQoJycpCiAgICAgIC8vICAgX3RoaXMudG9wMyA9IHJlc3BvbnNlLmRhdGEuc2xpY2UoMCwgMykKICAgICAgLy8gfSkKCiAgICAgIC8qCiAgICAgICAqIGZpcmViYXNlIGJhY2t1cAogICAgICAgKi8KICAgICAgY29uc3QgbGVhZHNSZWYgPSBmaXJlYmFzZS5kYXRhYmFzZSgpLnJlZignY3Jvd2Qtc2FsZXMnKQoKICAgICAgLy9lc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXRoaXMtYWxpYXMKICAgICAgbGV0IF90aGlzID0gdGhpcwogICAgICB0aGlzLmxpc3RlbmVyID0gbGVhZHNSZWYub24oJ3ZhbHVlJywgZnVuY3Rpb24gKHNuYXBzaG90KSB7CiAgICAgICAgX3RoaXMubGlzdFJvdW5kID0gc25hcHNob3QudmFsKCkKICAgICAgICBjb25zdCByb3VuZEFjdGl2ZSA9IHNuYXBzaG90LnZhbCgpLmZpbHRlcihyb3VuZCA9PiByb3VuZC5pc0FjdGl2ZSkKICAgICAgICBpZiAoIXJvdW5kQWN0aXZlLmxlbmd0aCkgewogICAgICAgICAgX3RoaXMucm91bmRDdXJyZW50ID0gbnVsbAogICAgICAgICAgX3RoaXMuaXNFbmRPbiA9IGZhbHNlCiAgICAgICAgICBfdGhpcy5oYW5kbGVHZXRSb3VuZE5leHQoKQogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICBfdGhpcy5yb3VuZEN1cnJlbnQgPSByb3VuZEFjdGl2ZVswXQogICAgICAgICAgX3RoaXMuaXNFbmRPbiA9IHRydWUKICAgICAgICAgIF90aGlzLnByb2dyZXNzYmFyID0gX3RoaXMuJG9wdGlvbnMuZmlsdGVycy5jb252ZXJ0QW1vdW50RGVjaW1hbCgoX3RoaXMucm91bmRDdXJyZW50LnBlcmNlbnRhZ2VTb2xkICogMTAwMCkgLyAxMCwgJ1BFUkNFTlQnKSAqIDEKICAgICAgICAgIF90aGlzLmhhbmRsZUdldERhdGEoKQogICAgICAgIH0KICAgICAgfSkKICAgIH0sCgogICAgaGFuZGxlR2V0Um91bmROZXh0KCkgewogICAgICBjb25zdCBsZWFkc1JlZiA9IGZpcmViYXNlLmRhdGFiYXNlKCkucmVmKCdjcm93ZC1zYWxlcycpCiAgICAgIGxlYWRzUmVmLm9mZigndmFsdWUnLCB0aGlzLmxpc3RlbmVyKQoKICAgICAgLyoqCiAgICAgICAqIE7hur91IHJlc3BvbnNlIGzDoCByb3VuZCBjdeG7kWkKICAgICAgICogcmVzcG9uc2UgbMOgIG51bGwgPD0+IGNoxrBhIHbDoG8gcm91bmQgbsOgbyA9PiBs4bqleSByb3VuZCAxCiAgICAgICAqLwoKICAgICAgaWYgKCF0aGlzLnJvdW5kQ3VycmVudCkgewogICAgICAgIGNvbnN0IHJvdW5kRmlyc3QgPSB0aGlzLmxpc3RSb3VuZFswXQogICAgICAgIGNvbnN0IHJvdW5kTGFzdCA9IHRoaXMubGlzdFJvdW5kW3RoaXMubGlzdFJvdW5kLmxlbmd0aCAtIDFdCgogICAgICAgIGNvbnN0IHRvRGF5ID0gRGF0ZS5ub3coKQogICAgICAgIGNvbnN0IGZyb21UaW1lUm91bmRGaXJzdCA9IG5ldyBEYXRlKHJvdW5kRmlyc3QuZnJvbURhdGUudGltZSkuZ2V0VGltZSgpCiAgICAgICAgY29uc3QgdG9UaW1lUm91bmRMYXN0ID0gbmV3IERhdGUocm91bmRMYXN0LnRvRGF0ZS50aW1lKS5nZXRUaW1lKCkKCiAgICAgICAgLy8gTuG6v3UgdG9kYXkgPiB0aW1lIHJvdW5kTGFzdAogICAgICAgIGlmICh0b0RheSA+IHRvVGltZVJvdW5kTGFzdCkgewogICAgICAgICAgdGhpcy5kYXkgPSAnMDAnCiAgICAgICAgICB0aGlzLmhvdXIgPSAnMDAnCiAgICAgICAgICB0aGlzLm1pbnV0ZSA9ICcwMCcKICAgICAgICAgIHRoaXMuc2Vjb25kID0gJzAwJwogICAgICAgICAgdGhpcy5yb3VuZEN1cnJlbnQgPSByb3VuZExhc3QKICAgICAgICAgIHRoaXMuaXNFbmRPbiA9IHRydWUKICAgICAgICAgIC8vIHRoaXMuaXNMb2FkaW5nID0gZmFsc2U7CiAgICAgICAgfQogICAgICAgIC8vIE7hur91IHRvZGF5IDwgdGltZSByb3VuZEZpcnN0CiAgICAgICAgaWYgKHRvRGF5IDwgZnJvbVRpbWVSb3VuZEZpcnN0KSB7CiAgICAgICAgICB0aGlzLnJvdW5kQ3VycmVudCA9IHRoaXMubGlzdFJvdW5kWzBdCiAgICAgICAgICB0aGlzLnByb2dyZXNzYmFyID0gdGhpcy4kb3B0aW9ucy5maWx0ZXJzLmNvbnZlcnRBbW91bnREZWNpbWFsKCh0aGlzLnJvdW5kQ3VycmVudC5wZXJjZW50YWdlU29sZCAqIDEwMDApIC8gMTAsICdQRVJDRU5UJykgKiAxCiAgICAgICAgICB0aGlzLmhhbmRsZUdldERhdGEoJ2Zyb20nKQogICAgICAgIH0KICAgICAgICAvLyBO4bq/dSBmcm9tVGltZVJvdW5kRmlyc3QgPCB0b2RheSA8IHRvVGltZVJvdW5kTGFzdAogICAgICAgIGlmICh0b0RheSA+IGZyb21UaW1lUm91bmRGaXJzdCAmJiB0b0RheSA8IHRvVGltZVJvdW5kTGFzdCkgewogICAgICAgICAgZm9yRWFjaCh0aGlzLmxpc3RSb3VuZCwgcm91bmQgPT4gewogICAgICAgICAgICBjb25zdCBmcm9tVGltZSA9IG5ldyBEYXRlKHJvdW5kLmZyb21EYXRlLnRpbWUpLmdldFRpbWUoKQogICAgICAgICAgICBpZiAodG9EYXkgPCBmcm9tVGltZSkgewogICAgICAgICAgICAgIHRoaXMucm91bmRDdXJyZW50ID0gcm91bmQKICAgICAgICAgICAgICByZXR1cm4gZmFsc2UKICAgICAgICAgICAgfQogICAgICAgICAgfSkKCiAgICAgICAgICB0aGlzLmlzRW5kT24gPSBmYWxzZQogICAgICAgICAgdGhpcy5wcm9ncmVzc2JhciA9IHRoaXMuJG9wdGlvbnMuZmlsdGVycy5jb252ZXJ0QW1vdW50RGVjaW1hbCgodGhpcy5yb3VuZEN1cnJlbnQucGVyY2VudGFnZVNvbGQgKiAxMDAwKSAvIDEwLCAnUEVSQ0VOVCcpICogMQogICAgICAgICAgdGhpcy5oYW5kbGVHZXREYXRhKCdmcm9tJykKICAgICAgICB9CiAgICAgIH0KICAgIH0sCgogICAgaGFuZGxlR2V0RGF0YSh0eXBlID0gJ3RvJykgewogICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXRoaXMtYWxpYXMKICAgICAgbGV0IF90aGlzID0gdGhpcwogICAgICB0aGlzLmNvdW50RG93bkRhdGUgPSB0eXBlID09PSAndG8nID8gbmV3IERhdGUodGhpcy5yb3VuZEN1cnJlbnQudG9EYXRlLnRpbWUpLmdldFRpbWUoKSA6IG5ldyBEYXRlKHRoaXMucm91bmRDdXJyZW50LmZyb21EYXRlLnRpbWUpLmdldFRpbWUoKQoKICAgICAgdGhpcy50aW1pbmcgPSBzZXRJbnRlcnZhbChmdW5jdGlvbiAoKSB7CiAgICAgICAgbGV0IG5vdyA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpCgogICAgICAgIGxldCBkaXN0YW5jZSA9IF90aGlzLmNvdW50RG93bkRhdGUgLSBub3cKCiAgICAgICAgLy9jYXNlIHJlYWR5IHN0YXJ0IGNo4bqheSBo4bq/dCB0aW1lCiAgICAgICAgaWYgKGRpc3RhbmNlIDw9IDAgJiYgIV90aGlzLmlzRW5kT24pIHsKICAgICAgICAgIF90aGlzLmNvdW50RG93bkRhdGUgPSBuZXcgRGF0ZShfdGhpcy5yb3VuZEN1cnJlbnQudG9EYXRlLnRpbWUpLmdldFRpbWUoKQogICAgICAgICAgX3RoaXMuaGFuZGxlVHVybk9uRmlyZWJhc2UoKQogICAgICAgICAgX3RoaXMuaXNFbmRPbiA9IHRydWUKICAgICAgICAgIC8vIF90aGlzLmlzTG9hZGluZyA9IGZhbHNlOwogICAgICAgIH0KCiAgICAgICAgLy9jYXNlIGNo4bqheSBo4bq/dCB0aW1lIGVuZCBvbiB2w6Aga2jDtG5nIHBo4bqjaSByb3VuZCBjdeG7kWkKICAgICAgICBpZiAoZGlzdGFuY2UgPD0gMCAmJiBfdGhpcy5pc0VuZE9uICYmICFfdGhpcy5nZXRJc0VuZFJvdW5kKSB7CiAgICAgICAgICAvLyBfdGhpcy5pc0xvYWRpbmcgPSB0cnVlOwogICAgICAgICAgX3RoaXMuaGFuZGxlVHVybk9uRmlyZWJhc2UoKQogICAgICAgICAgX3RoaXMuaXNFbmRPbiA9IHRydWUKICAgICAgICAgIC8vIF90aGlzLmlzTG9hZGluZyA9IGZhbHNlOwogICAgICAgICAgcmV0dXJuCiAgICAgICAgfQoKICAgICAgICAvL2Nhc2Ugcm91bmQgY3Xhu5FpIHbDoCBo4bq/dCBo4bqhbgogICAgICAgIGlmIChkaXN0YW5jZSA8PSAwICYmIF90aGlzLmlzRW5kT24gJiYgX3RoaXMuZ2V0SXNFbmRSb3VuZCkgewogICAgICAgICAgY2xlYXJJbnRlcnZhbChfdGhpcy50aW1pbmcpCiAgICAgICAgICBjb25zdCBsZWFkc1JlZiA9IGZpcmViYXNlLmRhdGFiYXNlKCkucmVmKCdjcm93ZC1zYWxlcycpCiAgICAgICAgICBsZWFkc1JlZi5vZmYoJ3ZhbHVlJywgX3RoaXMubGlzdGVuZXIpCiAgICAgICAgICAvLyBFdmVudEJ1cy4kZW1pdCgnYWN0aXZlUm91bmQnLCBmYWxzZSkKICAgICAgICAgIC8vIF90aGlzLnNldElzQWN0aXZlUm91bmQoZmFsc2UpCgogICAgICAgICAgLy8gX3RoaXMuaXNMb2FkaW5nID0gZmFsc2U7CiAgICAgICAgICByZXR1cm4KICAgICAgICB9CgogICAgICAgIF90aGlzLmRheSA9IE1hdGguZmxvb3IoZGlzdGFuY2UgLyAoMTAwMCAqIDYwICogNjAgKiAyNCkpID49IDEwID8gTWF0aC5mbG9vcihkaXN0YW5jZSAvICgxMDAwICogNjAgKiA2MCAqIDI0KSkgOiAnMCcgKyBNYXRoLmZsb29yKGRpc3RhbmNlIC8gKDEwMDAgKiA2MCAqIDYwICogMjQpKQogICAgICAgIF90aGlzLmhvdXIgPQogICAgICAgICAgTWF0aC5mbG9vcigoZGlzdGFuY2UgJSAoMTAwMCAqIDYwICogNjAgKiAyNCkpIC8gKDEwMDAgKiA2MCAqIDYwKSkgPj0gMTAKICAgICAgICAgICAgPyBNYXRoLmZsb29yKChkaXN0YW5jZSAlICgxMDAwICogNjAgKiA2MCAqIDI0KSkgLyAoMTAwMCAqIDYwICogNjApKQogICAgICAgICAgICA6ICcwJyArIE1hdGguZmxvb3IoKGRpc3RhbmNlICUgKDEwMDAgKiA2MCAqIDYwICogMjQpKSAvICgxMDAwICogNjAgKiA2MCkpCiAgICAgICAgX3RoaXMubWludXRlID0KICAgICAgICAgIE1hdGguZmxvb3IoKGRpc3RhbmNlICUgKDEwMDAgKiA2MCAqIDYwKSkgLyAoMTAwMCAqIDYwKSkgPj0gMTAKICAgICAgICAgICAgPyBNYXRoLmZsb29yKChkaXN0YW5jZSAlICgxMDAwICogNjAgKiA2MCkpIC8gKDEwMDAgKiA2MCkpCiAgICAgICAgICAgIDogJzAnICsgTWF0aC5mbG9vcigoZGlzdGFuY2UgJSAoMTAwMCAqIDYwICogNjApKSAvICgxMDAwICogNjApKQogICAgICAgIF90aGlzLnNlY29uZCA9IE1hdGguZmxvb3IoKGRpc3RhbmNlICUgKDEwMDAgKiA2MCkpIC8gMTAwMCkgPj0gMTAgPyBNYXRoLmZsb29yKChkaXN0YW5jZSAlICgxMDAwICogNjApKSAvIDEwMDApIDogJzAnICsgTWF0aC5mbG9vcigoZGlzdGFuY2UgJSAoMTAwMCAqIDYwKSkgLyAxMDAwKQogICAgICB9LCAxMDAwKQogICAgICAvLyB0aGlzLmlzTG9hZGluZyA9IGZhbHNlOwogICAgfQogIH0KfQo="},null]}