{"remainingRequest":"D:\\NEU\\CDTT\\frontend\\Website\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\NEU\\CDTT\\frontend\\Website\\src\\modules\\auth\\views\\Verify.vue?vue&type=style&index=0&id=103a7c60&scoped=true&lang=scss&","dependencies":[{"path":"D:\\NEU\\CDTT\\frontend\\Website\\src\\modules\\auth\\views\\Verify.vue","mtime":1661155681404},{"path":"D:\\NEU\\CDTT\\frontend\\Website\\node_modules\\css-loader\\dist\\cjs.js","mtime":1660970368992},{"path":"D:\\NEU\\CDTT\\frontend\\Website\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":1660970411845},{"path":"D:\\NEU\\CDTT\\frontend\\Website\\node_modules\\postcss-loader\\src\\index.js","mtime":1660970387688},{"path":"D:\\NEU\\CDTT\\frontend\\Website\\node_modules\\sass-loader\\dist\\cjs.js","mtime":1660970364303},{"path":"D:\\NEU\\CDTT\\frontend\\Website\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1660970364629},{"path":"D:\\NEU\\CDTT\\frontend\\Website\\node_modules\\vue-loader\\lib\\index.js","mtime":1660970394220}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgouYnRuIHsKICBwYWRkaW5nOiAxMnB4IDAgIWltcG9ydGFudDsKICBmb250LXNpemU6IDE2cHggIWltcG9ydGFudDsKICBsaW5lLWhlaWdodDogMjRweCAhaW1wb3J0YW50Owp9Ci50aXRsZS1mb3JtIHsKICBjb2xvcjogIzIwMWYxZTsKICBtYXJnaW4tYm90dG9tOiAzcHg7Cn0KLmlucHV0LWNvZGUgewogIG1hcmdpbi10b3A6IDE3cHg7CiAgbWFyZ2luLWxlZnQ6IDRweDsKfQoKLm5vdGUtc3R5bGUgewogIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47CiAgdGV4dC1hbGlnbjogY2VudGVyOwp9Ci51c2UtYW5vdGhlci1waG9uZSB7CiAgbWFyZ2luLXRvcDogMTJweDsKfQoudXNlLXZvaWNlLWNhbGwgewogIG1hcmdpbi10b3A6IDA7Cn0KCkBtZWRpYSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6IDc2OHB4KSB7CiAgLmJjLXZlcmlmeSB7CiAgICAudGl0bGUtZm9ybSB7CiAgICAgIGZvbnQtc2l6ZTogMjBweDsKICAgICAgbGluZS1oZWlnaHQ6IG5vcm1hbDsKICAgICAgbWFyZ2luLWJvdHRvbTogMy41cHg7CiAgICAgIGNvbG9yOiAjMGEwYjBkOwogICAgfQoKICAgIC5pY29uIHsKICAgICAgZGlzcGxheTogbm9uZTsKICAgIH0KCiAgICAudGV4dC1iYXNlIHsKICAgICAgZm9udC1zaXplOiAxNHB4OwogICAgICBjb2xvcjogIzViNjE2ZTsKICAgICAgdGV4dC1hbGlnbjogY2VudGVyOwogICAgICBkaXNwbGF5OiBibG9jazsKICAgIH0KCiAgICA6OnYtZGVlcC5uby1yZXF1aXJlLWxhYmVsIHsKICAgICAgLmVsLWZvcm0taXRlbV9fbGFiZWwgewogICAgICAgIGZvbnQtc2l6ZTogMTRweCAhaW1wb3J0YW50OwogICAgICAgIGZvbnQtd2VpZ2h0OiA0MDAgIWltcG9ydGFudDsKICAgICAgICBjb2xvcjogIzBhMGIwZDsKICAgICAgfQogICAgfQoKICAgIC5pbnB1dC1jb2RlIHsKICAgICAgbWFyZ2luLWxlZnQ6IDBweDsKICAgIH0KICB9Cn0K"},{"version":3,"sources":["Verify.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqSA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA","file":"Verify.vue","sourceRoot":"src/modules/auth/views","sourcesContent":["<template>\r\n  <div class=\"bc-verify\">\r\n    <h3 class=\"text-3xl text-center text-semibold title-form\">{{ getTittle }}</h3>\r\n    <div class=\"be-flex verify-code\">\r\n      <base-icon class=\"icon\" :icon=\"getIcon\" size=\"80\" />\r\n      <div class=\"w-100 input-code style-verify-code\">\r\n        <el-form :model=\"form\" :rules=\"rules\" ref=\"form-verify\" @submit.native.prevent=\"handleSubmit\">\r\n          <el-form-item prop=\"code\" :label=\"`${$t('verify.label')}`\" class=\"no-require-label\">\r\n            <el-input type=\"text\" v-model.trim=\"form.code\" maxlength=\"6\" :placeholder=\"`${$t('verify.placeholder')}`\" @keypress.native=\"handleChangeCode($event)\" />\r\n          </el-form-item>\r\n        </el-form>\r\n      </div>\r\n    </div>\r\n    <el-button :loading=\"isLoading\" :class=\"getDisableBtn ? 'btn--disabled' : null\" class=\"btn w-100 is-none-border cursor\" @click=\"handleSubmit\"\r\n      >{{ $t('verify.submit') }}\r\n    </el-button>\r\n    <!-- <button :class=\"getDisableBtn ? 'btn--disabled' : null\" type=\"button\" class=\"btn is-none-border w-100 cursor\" @click=\"handleSubmit\">{{ $t('verify.submit') }}</button> -->\r\n    <div v-if=\"getShowResendCode\" class=\"text-base be-flex jc-space-center mt-24 text-grey-130 note-style\">\r\n      {{ $t('verify.question') }} &nbsp;<span class=\"text-hyperlink text-semibold cursor\" @click=\"handleResendCode\">{{ $t('verify.re-send') }} </span>\r\n    </div>\r\n    <div v-if=\"$route.query.reason === 'VERIFY-SMS'\" class=\"text-base be-flex jc-space-center mt-12 text-grey-130 note-style use-voice-call\">\r\n      <span class=\"text-hyperlink text-semibold cursor\" @click=\"handleCallSendCode\"> {{ $t('verify.voice-call') }}</span>\r\n    </div>\r\n    <div v-if=\"$route.query.reason === 'VERIFY-SMS'\" class=\"text-base be-flex jc-space-center mt-12 text-grey-130 note-style use-another-phone\">\r\n      <span class=\"text-hyperlink text-semibold cursor\" @click=\"handleUseOtherPhone\"> {{ $t('verify.another-phone') }}</span>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script lang=\"ts\">\r\n  import { Component, Vue } from 'vue-property-decorator'\r\n  import getRepository from '@/services'\r\n  import { VerifyRepository } from '@/services/repositories/verify'\r\n  import { AuthRepository } from '@/services/repositories/auth'\r\n  import { ActivityRepository } from '@/services/repositories/activity'\r\n\r\n  import { IBodyApiVerify } from '@/interface'\r\n  import { namespace } from 'vuex-class'\r\n  import includes from 'lodash/includes'\r\n\r\n  const bcAuth = namespace('beAuth')\r\n  const apiVerify: VerifyRepository = getRepository('verify')\r\n  const apiAuth: AuthRepository = getRepository('auth')\r\n  const apiActivity: ActivityRepository = getRepository('activity')\r\n\r\n  @Component\r\n  export default class VerifyPage extends Vue {\r\n    @bcAuth.Action('login') login!: (data: Record<string, any>) => Promise<void>\r\n    @bcAuth.Action('setToken') setToken!: (data: Record<string, any>) => Promise<void>\r\n    @bcAuth.Mutation('SET_USER_INFO') setUserInfo!: (data: Record<string, any>) => void\r\n    @bcAuth.Getter('isLogin') isLogin!: boolean\r\n    @bcAuth.Action('logout') logout!: () => Promise<void>\r\n\r\n    form: Record<string, any> = {\r\n      code: ''\r\n    }\r\n    isLoading = false\r\n    rules: Record<string, any> = {\r\n      code: [\r\n        {\r\n          required: true,\r\n          message: this.$t('verify.wrong-code'),\r\n          trigger: 'blur'\r\n        }\r\n      ]\r\n    }\r\n\r\n    get getShowResendCode(): boolean {\r\n      return this.$route.name !== 'verify-app' && this.$route.query.reason !== 'CHANGE_PHONE'\r\n    }\r\n    get getDisableBtn(): boolean {\r\n      return this.form.code.length !== 6\r\n    }\r\n\r\n    get getIcon(): string {\r\n      const name = this.$route.name\r\n      if (name === 'verify-phone') {\r\n        return 'verify-phone'\r\n      }\r\n      if (name === 'verify-email') {\r\n        return 'verify-email'\r\n      }\r\n      return 'verify-app'\r\n    }\r\n\r\n    get getTittle(): string | any {\r\n      const name = this.$route.name\r\n      if (name === 'verify-phone') {\r\n        return this.$t('verify.title-phone')\r\n      }\r\n      if (name === 'verify-email') {\r\n        return this.$t('verify.title-email')\r\n      }\r\n      return this.$t('verify.title-app')\r\n    }\r\n\r\n    created(): void {\r\n      console.log(this.$route.query.reason === 'CHANGE_PHONE')\r\n\r\n      if (this.isLogin && this.$route.query.reason === 'CHANGE_PHONE') {\r\n        this.logout()\r\n      }\r\n    }\r\n\r\n    handleChangeCode(event: KeyboardEvent): void {\r\n      let keyCode = event.keyCode ? event.keyCode : event.which\r\n      if (keyCode === 32) {\r\n        event.preventDefault()\r\n      }\r\n    }\r\n\r\n    clearValidate(): void {\r\n      //@ts-ignore\r\n      this.$refs['form-verify']?.resetFields()\r\n    }\r\n\r\n    handleUseOtherPhone(): void {\r\n      this.$router.push({ name: 'verify-phone-number', query: { email: this.$route.query.email } })\r\n    }\r\n\r\n    handleCallSendCode(): void {\r\n      const { country, phone, countryCode, email } = this.$route.query!\r\n      const data = {\r\n        country,\r\n        phone,\r\n        countryCode,\r\n        email,\r\n        phoneCall: true\r\n      }\r\n      let message: any = ''\r\n      apiAuth\r\n        .verifyPhone(data)\r\n        .then(() => {\r\n          message = this.$t('notify.send-code-voice')\r\n          this.$message.success({ message, duration: 5000 })\r\n        })\r\n        .catch(() => {\r\n          console.log('error')\r\n          // message = this.$t('notify.send-code-fail')\r\n          // this.$message.error({ message, duration: 5000 })\r\n        })\r\n    }\r\n\r\n    async handleResendCode(): Promise<void> {\r\n      try {\r\n        let message: any = ''\r\n        const email = this.$route.query.email\r\n        // const reason = this.$route.query.reason\r\n        const type = this.$route.query.type\r\n        const reason = this.$route.query.reason === 'REQUEST_LOGIN' ? 'FOR_LOGIN' : this.$route.query.reason === 'FORGET_PASSWORD' ? 'FORGOT_PASSWORD' : 'FOR_REGISTER'\r\n        await apiAuth.resendCode({ email, type, reason })\r\n        message = this.$t('notify.send-code')\r\n        this.$message.success({ message, duration: 5000 })\r\n      } catch (error: any) {\r\n        let message: any = ''\r\n        const { config, data } = error.response\r\n        if (data.status === 'USER_BLOCKED' && includes(config.url, 'resendCode')) {\r\n          message = this.$t('notify.user-blocked-resend-code')\r\n          this.$message.error({ message, duration: 5000 })\r\n        }\r\n        if (data.status === 'USER_LOCKED' && includes(config.url, 'resendCode')) {\r\n          message = this.$t('notify.user-locked-resend-code')\r\n          this.$message.error({ message, duration: 5000 })\r\n        }\r\n      }\r\n    }\r\n\r\n    handleSubmit(): void {\r\n      if (this.getDisableBtn) {\r\n        return\r\n      }\r\n      //@ts-ignore\r\n      this.$refs['form-verify'].validate(valid => {\r\n        if (valid) {\r\n          this.isLoading = true\r\n          let message: any = ''\r\n          // const type = this.$route.query.type\r\n          const password = this.$route.query.pass\r\n          const email = this.$route.query.email\r\n          const reason = this.$route.query.reason\r\n          const data: IBodyApiVerify = {\r\n            email,\r\n            password,\r\n            verificationCode: this.form.code\r\n          }\r\n          if (reason === 'REQUEST_LOGIN') {\r\n            // const encodePass = this.$options.filters?.encryptPassword(password)\r\n            this.login({ ...data })\r\n              .then(() => {\r\n                message = this.$t('notify.verify-success')\r\n                this.$message.success({ message, duration: 5000 })\r\n                // case click any button from  marketplace , but login yet\r\n                if (this.$route.query.isBack === '1') {\r\n                  const name = this.$route.query.name as string\r\n                  const type = this.$route.query.marketType as string\r\n                  const id = this.$route.query.id as string\r\n                  this.$router.push({ name, params: { type, id } })\r\n                } else if (this.$route.query.isBack === 'nft') {\r\n                  const name = this.$route.query.name as string\r\n                  const id = this.$route.query.id as string\r\n                  this.$router.push({ name, params: { id } })\r\n                } else {\r\n                  this.$router.push({ name: 'Wallet' })\r\n                }\r\n                this.isLoading = false\r\n              })\r\n              .catch(() => {\r\n                this.isLoading = false\r\n              })\r\n          }\r\n          if (reason === 'SIGN_UP') {\r\n            delete data.password\r\n            apiAuth\r\n              .verifyCode('CODE', { ...data, type: 'EMAIL' })\r\n              .then(res => {\r\n                this.$router.push({ name: 'verify-phone-number', query: { email } })\r\n              })\r\n              .catch(error => {\r\n                this.isLoading = false\r\n              })\r\n          }\r\n          if (reason === 'VERIFY-SMS') {\r\n            delete data.password\r\n            apiAuth\r\n              .verifyCode('CODE', { ...data, type: 'SMS' }, 0, true)\r\n              .then(res => {\r\n                this.setToken(res)\r\n                this.setUserInfo(res)\r\n                // apiActivity.createLogLogin({ sourceType: 'WEB' })\r\n                this.$router.push({ name: 'Wallet' })\r\n              })\r\n              .catch(error => {\r\n                console.log(error)\r\n                this.isLoading = false\r\n              })\r\n          }\r\n          if (reason === 'FORGET_PASSWORD') {\r\n            apiAuth\r\n              .forgetPassword({ ...data, type: 'EMAIL' })\r\n              .then(code => {\r\n                message = this.$t('notify.verify-success')\r\n                this.$message.success({ message, duration: 5000 })\r\n                this.$router.push({ name: 'reset-password', query: { email, reason: 'FORGET_PASSWORD', code } })\r\n                this.isLoading = false\r\n              })\r\n              .catch(() => {\r\n                this.isLoading = false\r\n              })\r\n          }\r\n\r\n          if (reason === 'CHANGE_PHONE') {\r\n            const params = {\r\n              ...this.$route.query,\r\n              verifyType: 'SMS',\r\n              code: this.form.code\r\n            }\r\n            apiAuth\r\n              .updatePhoneUser(params)\r\n              .then(() => {\r\n                message = this.$t('notify.change-phone-succsess')\r\n                this.$message.success({ message, duration: 5000 })\r\n                this.$router.push({ name: 'login' })\r\n              })\r\n              .catch(() => {\r\n                this.isLoading = false\r\n              })\r\n          }\r\n        }\r\n      })\r\n    }\r\n    getMobileOperatingSystem(): string {\r\n      let userAgent = navigator.userAgent || navigator.vendor\r\n\r\n      // Windows Phone must come first because its UA also contains \"Android\"\r\n      if (/windows phone/i.test(userAgent)) {\r\n        return 'Windows Phone'\r\n      }\r\n\r\n      if (/android/i.test(userAgent)) {\r\n        return 'Android'\r\n      }\r\n\r\n      // iOS detection from: http://stackoverflow.com/a/9039885/177710\r\n      if (/iPad|iPhone|iPod/.test(userAgent)) {\r\n        return 'iOS'\r\n      }\r\n\r\n      return 'unknown'\r\n    }\r\n  }\r\n</script>\r\n\r\n<style scoped lang=\"scss\">\r\n  .btn {\r\n    padding: 12px 0 !important;\r\n    font-size: 16px !important;\r\n    line-height: 24px !important;\r\n  }\r\n  .title-form {\r\n    color: #201f1e;\r\n    margin-bottom: 3px;\r\n  }\r\n  .input-code {\r\n    margin-top: 17px;\r\n    margin-left: 4px;\r\n  }\r\n\r\n  .note-style {\r\n    flex-direction: column;\r\n    text-align: center;\r\n  }\r\n  .use-another-phone {\r\n    margin-top: 12px;\r\n  }\r\n  .use-voice-call {\r\n    margin-top: 0;\r\n  }\r\n\r\n  @media screen and (max-width: 768px) {\r\n    .bc-verify {\r\n      .title-form {\r\n        font-size: 20px;\r\n        line-height: normal;\r\n        margin-bottom: 3.5px;\r\n        color: #0a0b0d;\r\n      }\r\n\r\n      .icon {\r\n        display: none;\r\n      }\r\n\r\n      .text-base {\r\n        font-size: 14px;\r\n        color: #5b616e;\r\n        text-align: center;\r\n        display: block;\r\n      }\r\n\r\n      ::v-deep.no-require-label {\r\n        .el-form-item__label {\r\n          font-size: 14px !important;\r\n          font-weight: 400 !important;\r\n          color: #0a0b0d;\r\n        }\r\n      }\r\n\r\n      .input-code {\r\n        margin-left: 0px;\r\n      }\r\n    }\r\n  }\r\n</style>\r\n"]}]}