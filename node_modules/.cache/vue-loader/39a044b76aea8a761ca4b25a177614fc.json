{"remainingRequest":"D:\\NEU\\CDTT\\frontend\\Website\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\NEU\\CDTT\\frontend\\Website\\src\\modules\\auth\\views\\LoginPage.vue?vue&type=style&index=0&id=7d532ede&scoped=true&lang=scss&","dependencies":[{"path":"D:\\NEU\\CDTT\\frontend\\Website\\src\\modules\\auth\\views\\LoginPage.vue","mtime":1661160594691},{"path":"D:\\NEU\\CDTT\\frontend\\Website\\node_modules\\css-loader\\dist\\cjs.js","mtime":1660970368992},{"path":"D:\\NEU\\CDTT\\frontend\\Website\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":1660970411845},{"path":"D:\\NEU\\CDTT\\frontend\\Website\\node_modules\\postcss-loader\\src\\index.js","mtime":1660970387688},{"path":"D:\\NEU\\CDTT\\frontend\\Website\\node_modules\\sass-loader\\dist\\cjs.js","mtime":1660970364303},{"path":"D:\\NEU\\CDTT\\frontend\\Website\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1660970364629},{"path":"D:\\NEU\\CDTT\\frontend\\Website\\node_modules\\vue-loader\\lib\\index.js","mtime":1660970394220}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCi5iYy1sb2dpbiB7CiAgYmFja2dyb3VuZC1jb2xvcjogI2Y2ZjhmYzsKICBtaW4taGVpZ2h0OiAxMDB2aDsKICBAbWVkaWEgc2NyZWVuIGFuZCAobWF4LWhlaWdodDogNzAwcHgpIHsKICAgIHBhZGRpbmctYm90dG9tOiAyMHB4OwogICAgaGVpZ2h0OiBhdXRvOwogIH0KICAuZm9ybSB7CiAgICBtYXgtd2lkdGg6IDUxMnB4OwogICAgbWFyZ2luOiA0MHB4IGF1dG8gMDsKICAgIGJveC1zaGFkb3c6IDBweCAwLjZweCAxLjhweCByZ2JhKDAsIDAsIDAsIDAuMSksIDBweCAzLjJweCA3LjJweCByZ2JhKDAsIDAsIDAsIDAuMTMpOwogICAgYm9yZGVyLXJhZGl1czogOHB4OwogICAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tYmMtYmctd2hpdGUpOwoKICAgIC5mb3JtLWl0ZW0gewogICAgICBwYWRkaW5nOiAzMHB4IDI0cHg7CiAgICAgIC50aXRsZS1mb3JtIHsKICAgICAgICBjb2xvcjogIzIwMWYxZTsKICAgICAgfQogICAgfQoKICAgIC5idG4gewogICAgICBwYWRkaW5nOiAxMnB4IDAgIWltcG9ydGFudDsKICAgICAgZm9udC1zaXplOiAxNnB4ICFpbXBvcnRhbnQ7CiAgICAgIGxpbmUtaGVpZ2h0OiAyNHB4ICFpbXBvcnRhbnQ7CiAgICAgIG1hcmdpbjogMjRweCAwICFpbXBvcnRhbnQ7CiAgICAgIGJhY2tncm91bmQ6ICNhZjY1MzU7CiAgICB9CiAgICAuYnRuOmhvdmVyIHsKICAgICAgYmFja2dyb3VuZDogI2FmNjUzNSAhaW1wb3J0YW50OwogICAgfQoKICAgIC5pbnB1dC1wYXNzd29yZCB7CiAgICAgIHBvc2l0aW9uOiByZWxhdGl2ZTsKICAgIH0KICAgIC5pY29uLXNob3ctcGFzc3dvcmQgewogICAgICBjdXJzb3I6IHBvaW50ZXI7CiAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTsKICAgICAgdG9wOiAzcHg7CiAgICAgIHJpZ2h0OiAxNHB4OwogICAgICAuc3Bhbi1pY29uIHsKICAgICAgICBjb2xvcjogdmFyKC0tYmMtY29sb3ItZ3JleTkwKTsKICAgICAgfQogICAgfQogIH0KfQpAbWVkaWEgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiA3NjhweCkgewogIC5iYy1sb2dpbiB7CiAgICAuZm9ybSB7CiAgICAgIHdpZHRoOiA5MCU7CiAgICAgIG1hcmdpbjogMjBweCBhdXRvIDA7CiAgICAgIGJveC1zaGFkb3c6IDBweCAwLjNweCAwLjlweCByZ2JhKDAsIDAsIDAsIDAuMSksIDBweCAxLjZweCAzLjZweCByZ2JhKDAsIDAsIDAsIDAuMTMpOwogICAgICBib3JkZXItcmFkaXVzOiA0cHg7CiAgICAgIG1heC13aWR0aDogNTEycHg7CgogICAgICAuZm9ybS1pdGVtIHsKICAgICAgICBwYWRkaW5nOiAyMHB4IDIwcHg7CgogICAgICAgIC50aXRsZS1mb3JtIHsKICAgICAgICAgIGZvbnQtc2l6ZTogMjBweDsKICAgICAgICAgIGNvbG9yOiAjMGEwYjBkOwogICAgICAgICAgbGluZS1oZWlnaHQ6IG5vcm1hbDsKICAgICAgICAgIG1hcmdpbi1ib3R0b206IDI0cHg7CiAgICAgICAgICBmb250LXdlaWdodDogNjAwOwogICAgICAgIH0KICAgICAgfQoKICAgICAgLnRleHQtYmFzZSB7CiAgICAgICAgZm9udC1zaXplOiAxNHB4OwogICAgICB9CiAgICB9CiAgfQp9Cg=="},{"version":3,"sources":["LoginPage.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6VA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA","file":"LoginPage.vue","sourceRoot":"src/modules/auth/views","sourcesContent":["<template>\r\n  <div class=\"bc-login\">\r\n    <header-login />\r\n    <div class=\"form\">\r\n      <el-form class=\"form-item\" v-if=\"$route.name === 'login'\" :model=\"form\" :rules=\"rules\" ref=\"form-login\">\r\n        <div class=\"text-3xl text-semibold text-center mb-2 title-form\">{{ $t('login.title-form') }}</div>\r\n        <el-form-item prop=\"email\">\r\n          <el-input placeholder=\"Email\" type=\"email\" v-model=\"form.email\" />\r\n        </el-form-item>\r\n        <el-form-item prop=\"password\" class=\"input-password\">\r\n          <el-input class=\"input-password\" :type=\"showPass == true ? 'text' : 'password'\" :placeholder=\"$t('login.placeholder.password')\" v-model=\"form.password\" />\r\n          <span class=\"icon-show-password\" @click=\"showPass = !showPass\">\r\n            <base-icon :icon=\"showPass == true ? 'icon-eye-off' : 'icon-eye'\" size=\"22\" />\r\n          </span>\r\n        </el-form-item>\r\n        <div class=\"be-flex jc-space-between w-100 mt-2\">\r\n          <el-checkbox v-model=\"remember\"\r\n            ><span class=\"text-base\" style=\"color: #201f1e; font-weight: 400; margin-left: -2px\">{{ $t('login.remember') }}</span></el-checkbox\r\n          >\r\n          <span @click=\"handleForgotPass\" class=\"text-base text-hyperlink cursor\" style=\"color: #af6535\">{{ $t('login.forgot') }}</span>\r\n        </div>\r\n        <!-- <div class=\"captcha be-flex jc-space-center mt-2\" v-if=\"urlSystem && urlSystem['api.auto.test'] !== '1'\">\r\n          <vue-recaptcha ref=\"recaptcha\" :loadRecaptchaScript=\"true\" :language=\"language\" :sitekey=\"siteKey\" @verify=\"verifyCaptcha\" @expired=\"expiredCaptcha\"></vue-recaptcha>\r\n        </div> -->\r\n        <el-button :loading=\"isLoading\" :class=\"getDisableBtn ? 'btn--disabled' : null\" class=\"btn w-100 is-none-border cursor btn-sign-in\" @click=\"handleLogin\"\r\n          >{{ $t('login.title-form') }}\r\n        </el-button>\r\n        <!-- <button :class=\"getDisableBtn ? 'btn--disabled' : null\" type=\"button\" class=\"btn is-none-border w-100 cursor\" @click=\"handleLogin\">{{ $t('login.title-form') }}</button> -->\r\n        <div class=\"text-base be-flex jc-space-center\" style=\"color: #5b616e\">\r\n          {{ $t('login.question') }} &nbsp;<span @click=\"handleSignUp\" class=\"text-hyperlink text-semibold cursor\" style=\"color: #af6535\"> {{ $t('login.sign-up') }} </span>\r\n        </div>\r\n      </el-form>\r\n      <verify-page v-else class=\"form-item\" ref=\"verify\" />\r\n    </div>\r\n    <!-- <language :isReload=\"$route.name === 'login' ? true : false\" @changeLanguage=\"handleChangeLanguage\" /> -->\r\n  </div>\r\n</template>\r\n\r\n<script lang=\"ts\">\r\n  import VueRecaptcha from 'vue-recaptcha'\r\n  import HeaderLogin from '../components/HeaderLogin.vue'\r\n  import Language from '../components/Language.vue'\r\n  import VerifyPage from './Verify.vue'\r\n  import getRepository from '@/services'\r\n  import { AuthRepository } from '@/services/repositories/auth'\r\n  import { Component, Vue } from 'vue-property-decorator'\r\n  import { namespace } from 'vuex-class'\r\n\r\n  const bcAuth = namespace('beAuth')\r\n  const beBase = namespace('beBase')\r\n  const bcMarketHome = namespace('bcMarketPrimaryHome')\r\n  const apiAuth: AuthRepository = getRepository('auth')\r\n\r\n  interface FormLogin {\r\n    email: string\r\n    password: string\r\n  }\r\n\r\n  @Component({ components: { VueRecaptcha, HeaderLogin, VerifyPage, Language } })\r\n  export default class LoginPage extends Vue {\r\n    @bcAuth.Action('login') login!: (data: Record<string, any>) => Promise<void>\r\n    @beBase.State('siteKey') siteKey!: string\r\n    @beBase.State('urlSystem') urlSystem!: Record<string, any>\r\n    @bcMarketHome.State('backToPage') backToPage!: Record<string, any>\r\n    showPass = false\r\n    language = 'en'\r\n    // siteKey = '6LcbbKAcAAAAAGS9BixBvH4okIBVNsY7lywPDleX'\r\n    form: FormLogin = {\r\n      email: '',\r\n      password: ''\r\n    }\r\n    remember = false\r\n    isVerifyCaptcha = false\r\n    captcha = ''\r\n    isLoading = false\r\n    optionLanguage: Array<Record<string, any>> = [\r\n      {\r\n        id: 1,\r\n        lang: 'en'\r\n      },\r\n      {\r\n        id: 2,\r\n        lang: 'vi'\r\n      }\r\n    ]\r\n\r\n    rules: Record<string, any> = {\r\n      email: [\r\n        {\r\n          required: true,\r\n          message: this.$t('login.wrong-email'),\r\n          trigger: 'blur'\r\n        },\r\n        { type: 'email', message: this.$t('login.wrong-email-type'), trigger: 'blur' }\r\n      ],\r\n      password: [\r\n        {\r\n          required: true,\r\n          message: this.$t('login.wrong-password'),\r\n          trigger: 'blur'\r\n        }\r\n      ]\r\n    }\r\n    created(): void {\r\n      this.language = window.localStorage.getItem('bc-lang')!\r\n    }\r\n\r\n    get getDisableBtn(): boolean {\r\n      if (this.urlSystem && this.urlSystem['api.auto.test'] !== '1') {\r\n        return !(this.form.email && this.form.password && this.isVerifyCaptcha)\r\n      }\r\n      return !(this.form.email && this.form.password)\r\n    }\r\n\r\n    verifyCaptcha(captcha: string): void {\r\n      this.captcha = captcha\r\n      this.isVerifyCaptcha = true\r\n    }\r\n    expiredCaptcha(): void {\r\n      this.isVerifyCaptcha = false\r\n    }\r\n\r\n    handleSignUp(): void {\r\n      this.$router.push({ name: 'sign-up' })\r\n    }\r\n    handleForgotPass(): void {\r\n      this.$router.push({ name: 'forgot-password' })\r\n    }\r\n    handleChangeLanguage(): void {\r\n      //@ts-ignore\r\n      this.$refs['verify']?.clearValidate()\r\n    }\r\n\r\n    /**\r\n     * * Luồng login: validate => verify => home\r\n     */\r\n\r\n    handleLogin(): void {\r\n      if (this.getDisableBtn) {\r\n        return\r\n      }\r\n      this.$router.push({ name: 'home' })\r\n      //@ts-ignore\r\n      // this.$refs['form-login']?.validate(async valid => {\r\n      //   if (valid) {\r\n      //     try {\r\n      //       let message: any = ''\r\n      //       this.isLoading = true\r\n      //       //get 2FA\r\n      //       // const res = await apiAuth.get2FA({ email: this.form.email }, this.captcha)\r\n      //       // const type = res\r\n      //       const encodePass = this.$options.filters?.encryptPassword(this.form.password)\r\n\r\n      //       const res = await apiAuth.validateUser({ ...this.form, password: encodePass }, this.captcha)\r\n      //       const type = res\r\n      //       const nameRoute = type.type === 'EMAIL' ? 'verify-email' : type.type === 'SMS' ? 'verify-phone' : 'verify-app'\r\n\r\n      //       if (!res.emailVerified && !res.phoneVerified) {\r\n      //         try {\r\n      //           // await apiAuth.resendCode({ email: this.form.email })\r\n      //           this.$router.push({ name: 'verify-email', query: { type: 'EMAIL', email: this.form.email, reason: 'SIGN_UP' } })\r\n      //           message = this.$t('notify.send-code')\r\n      //           this.$message.success({ message, duration: 5000 })\r\n      //           return\r\n      //         } catch (error) {\r\n      //           console.log(error)\r\n      //           // message = this.$t('notify.send-code-fail')\r\n      //           // this.$message.error({ message, duration: 5000 })\r\n      //         }\r\n      //       }\r\n\r\n      //       if (res.emailVerified && !res.phoneVerified) {\r\n      //         if (res.skipVerifyPhone) {\r\n      //           if (type.type === 'NONE') {\r\n      //             this.login({ ...this.form, password: encodePass }).then(() => {\r\n      //               // case click any button from  marketplace , but login yet\r\n      //               if (this.$route.query.isBack === '1') {\r\n      //                 const name = this.$route.query.name as string\r\n      //                 const type = this.$route.query.type as string\r\n      //                 const id = this.$route.query.id as string\r\n      //                 this.$router.push({ name, params: { type, id } })\r\n      //               } else if (this.$route.query.isBack === 'nft') {\r\n      //                 const name = this.$route.query.name as string\r\n      //                 const id = this.$route.query.id as string\r\n      //                 this.$router.push({ name, params: { id } })\r\n      //               } else {\r\n      //                 this.$router.push({ name: 'Wallet' })\r\n      //               }\r\n\r\n      //               message = this.$t('notify.login-success')\r\n      //               this.$message.success({ message, duration: 5000 })\r\n      //             })\r\n      //           } else {\r\n      //             if (this.$route.query.isBack === 'nft') {\r\n      //               this.$router.push({\r\n      //                 name: nameRoute,\r\n      //                 query: {\r\n      //                   email: this.form.email,\r\n      //                   pass: encodePass,\r\n      //                   reason: 'REQUEST_LOGIN',\r\n      //                   isBack: 'nft',\r\n      //                   id: this.$route.query.id,\r\n      //                   name: this.$route.query.name\r\n      //                 }\r\n      //               })\r\n      //             } else {\r\n      //               this.$router.push({ name: nameRoute, query: { type: type.type, email: this.form.email, pass: encodePass, reason: 'REQUEST_LOGIN' } })\r\n      //             }\r\n      //           }\r\n      //         } else {\r\n      //           this.$router.push({ name: 'verify-phone-number', query: { email: this.form.email } })\r\n      //         }\r\n      //         return\r\n      //       }\r\n\r\n      //       //send code\r\n      //       if (res.emailVerified && res.phoneVerified && (type.type === 'EMAIL' || type.type === 'SMS')) {\r\n      //         try {\r\n      //           // case click any button from  marketplace , but login yet\r\n      //           if (this.$route.query.isBack === '1') {\r\n      //             this.$router.push({\r\n      //               name: nameRoute,\r\n      //               query: {\r\n      //                 type: type.type,\r\n      //                 email: this.form.email,\r\n      //                 pass: encodePass,\r\n      //                 reason: 'REQUEST_LOGIN',\r\n      //                 isBack: '1',\r\n      //                 id: this.$route.query.id,\r\n      //                 name: this.$route.query.name,\r\n      //                 marketType: this.$route.query.type\r\n      //               }\r\n      //             })\r\n      //           } else if (this.$route.query.isBack === 'nft') {\r\n      //             this.$router.push({\r\n      //               name: nameRoute,\r\n      //               query: {\r\n      //                 email: this.form.email,\r\n      //                 pass: encodePass,\r\n      //                 reason: 'REQUEST_LOGIN',\r\n      //                 isBack: 'nft',\r\n      //                 id: this.$route.query.id,\r\n      //                 name: this.$route.query.name\r\n      //               }\r\n      //             })\r\n      //           } else {\r\n      //             this.$router.push({ name: nameRoute, query: { type: type.type, email: this.form.email, pass: encodePass, reason: 'REQUEST_LOGIN' } })\r\n      //           }\r\n      //           message = this.$t('notify.send-code')\r\n      //           this.$message.success({ message, duration: 5000 })\r\n      //           return\r\n      //         } catch (error) {\r\n      //           console.log(error)\r\n      //           // message = this.$t('notify.send-code-fail')\r\n      //           // this.$message.error({ message, duration: 5000 })\r\n      //         }\r\n      //       }\r\n\r\n      //       if (res.emailVerified && res.phoneVerified && type.type === 'APP') {\r\n      //         // case click any button from  marketplace , but login yet\r\n      //         if (this.$route.query.isBack === '1') {\r\n      //           this.$router.push({\r\n      //             name: nameRoute,\r\n      //             query: {\r\n      //               type: type.type,\r\n      //               email: this.form.email,\r\n      //               pass: encodePass,\r\n      //               reason: 'REQUEST_LOGIN',\r\n      //               isBack: '1',\r\n      //               id: this.$route.query.id,\r\n      //               name: this.$route.query.name,\r\n      //               marketType: this.$route.query.type\r\n      //             }\r\n      //           })\r\n      //         } else if (this.$route.query.isBack === 'nft') {\r\n      //           this.$router.push({\r\n      //             name: nameRoute,\r\n      //             query: {\r\n      //               email: this.form.email,\r\n      //               pass: encodePass,\r\n      //               reason: 'REQUEST_LOGIN',\r\n      //               isBack: 'nft',\r\n      //               id: this.$route.query.id,\r\n      //               name: this.$route.query.name\r\n      //             }\r\n      //           })\r\n      //         } else {\r\n      //           this.$router.push({ name: nameRoute, query: { type: type.type, email: this.form.email, pass: encodePass, reason: 'REQUEST_LOGIN' } })\r\n      //         }\r\n      //         return\r\n      //       }\r\n\r\n      //       if (type.type === 'NONE') {\r\n      //         this.login({ ...this.form, password: encodePass }).then(() => {\r\n      //           // case click any button from  marketplace , but login yet\r\n      //           if (this.$route.query.isBack === '1') {\r\n      //             const name = this.$route.query.name as string\r\n      //             const type = this.$route.query.type as string\r\n      //             const id = this.$route.query.id as string\r\n      //             this.$router.push({ name, params: { type, id } })\r\n      //           } else if (this.$route.query.isBack === 'nft') {\r\n      //             const name = this.$route.query.name as string\r\n      //             const id = this.$route.query.id as string\r\n      //             this.$router.push({ name, params: { id } })\r\n      //           } else {\r\n      //             this.$router.push({ name: 'Wallet' })\r\n      //           }\r\n\r\n      //           message = this.$t('notify.login-success')\r\n      //           this.$message.success({ message, duration: 5000 })\r\n      //         })\r\n      //       }\r\n\r\n      //       // this.isLoading = false\r\n      //     } catch (error: any) {\r\n      //       this.isLoading = false\r\n      //       const { data } = error.response\r\n      //       if (data.status === 'INVALID_CAPTCHA') {\r\n      //         //@ts-ignore\r\n      //         this.$refs['recaptcha'].reset()\r\n      //         this.isVerifyCaptcha = false\r\n      //       }\r\n      //     }\r\n      //   }\r\n      // })\r\n    }\r\n    getMobileOperatingSystem(): string {\r\n      let userAgent = navigator.userAgent || navigator.vendor\r\n\r\n      // Windows Phone must come first because its UA also contains \"Android\"\r\n      if (/windows phone/i.test(userAgent)) {\r\n        return 'Windows Phone'\r\n      }\r\n\r\n      if (/android/i.test(userAgent)) {\r\n        return 'Android'\r\n      }\r\n\r\n      // iOS detection from: http://stackoverflow.com/a/9039885/177710\r\n      if (/iPad|iPhone|iPod/.test(userAgent)) {\r\n        return 'iOS'\r\n      }\r\n\r\n      return 'unknown'\r\n    }\r\n  }\r\n</script>\r\n\r\n<style scoped lang=\"scss\">\r\n  .bc-login {\r\n    background-color: #f6f8fc;\r\n    min-height: 100vh;\r\n    @media screen and (max-height: 700px) {\r\n      padding-bottom: 20px;\r\n      height: auto;\r\n    }\r\n    .form {\r\n      max-width: 512px;\r\n      margin: 40px auto 0;\r\n      box-shadow: 0px 0.6px 1.8px rgba(0, 0, 0, 0.1), 0px 3.2px 7.2px rgba(0, 0, 0, 0.13);\r\n      border-radius: 8px;\r\n      background-color: var(--bc-bg-white);\r\n\r\n      .form-item {\r\n        padding: 30px 24px;\r\n        .title-form {\r\n          color: #201f1e;\r\n        }\r\n      }\r\n\r\n      .btn {\r\n        padding: 12px 0 !important;\r\n        font-size: 16px !important;\r\n        line-height: 24px !important;\r\n        margin: 24px 0 !important;\r\n        background: #af6535;\r\n      }\r\n      .btn:hover {\r\n        background: #af6535 !important;\r\n      }\r\n\r\n      .input-password {\r\n        position: relative;\r\n      }\r\n      .icon-show-password {\r\n        cursor: pointer;\r\n        position: absolute;\r\n        top: 3px;\r\n        right: 14px;\r\n        .span-icon {\r\n          color: var(--bc-color-grey90);\r\n        }\r\n      }\r\n    }\r\n  }\r\n  @media screen and (max-width: 768px) {\r\n    .bc-login {\r\n      .form {\r\n        width: 90%;\r\n        margin: 20px auto 0;\r\n        box-shadow: 0px 0.3px 0.9px rgba(0, 0, 0, 0.1), 0px 1.6px 3.6px rgba(0, 0, 0, 0.13);\r\n        border-radius: 4px;\r\n        max-width: 512px;\r\n\r\n        .form-item {\r\n          padding: 20px 20px;\r\n\r\n          .title-form {\r\n            font-size: 20px;\r\n            color: #0a0b0d;\r\n            line-height: normal;\r\n            margin-bottom: 24px;\r\n            font-weight: 600;\r\n          }\r\n        }\r\n\r\n        .text-base {\r\n          font-size: 14px;\r\n        }\r\n      }\r\n    }\r\n  }\r\n</style>\r\n"]}]}