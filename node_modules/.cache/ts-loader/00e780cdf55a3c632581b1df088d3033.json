{"remainingRequest":"D:\\NEU\\CDTT\\frontend\\Website\\node_modules\\thread-loader\\dist\\cjs.js!D:\\NEU\\CDTT\\frontend\\Website\\node_modules\\babel-loader\\lib\\index.js!D:\\NEU\\CDTT\\frontend\\Website\\node_modules\\ts-loader\\index.js??ref--15-3!D:\\NEU\\CDTT\\frontend\\Website\\node_modules\\eslint-loader\\index.js??ref--14-0!D:\\NEU\\CDTT\\frontend\\Website\\src\\modules\\auth\\store\\auth\\actions.ts","dependencies":[{"path":"D:\\NEU\\CDTT\\frontend\\Website\\src\\modules\\auth\\store\\auth\\actions.ts","mtime":1660970151246},{"path":"D:\\NEU\\CDTT\\frontend\\Website\\babel.config.js","mtime":1660970148265},{"path":"D:\\NEU\\CDTT\\frontend\\Website\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1660970364629},{"path":"D:\\NEU\\CDTT\\frontend\\Website\\node_modules\\thread-loader\\dist\\cjs.js","mtime":1660970364258},{"path":"D:\\NEU\\CDTT\\frontend\\Website\\node_modules\\babel-loader\\lib\\index.js","mtime":1660970387821},{"path":"D:\\NEU\\CDTT\\frontend\\Website\\node_modules\\ts-loader\\index.js","mtime":1660970390648},{"path":"D:\\NEU\\CDTT\\frontend\\Website\\node_modules\\eslint-loader\\index.js","mtime":1660970366946}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9hc3luY1RvR2VuZXJhdG9yIGZyb20gIkQ6XFxORVVcXENEVFRcXGZyb250ZW5kXFxXZWJzaXRlXFxub2RlX21vZHVsZXNcXEBiYWJlbFxccnVudGltZVxcaGVscGVyc1xcZXNtXFxhc3luY1RvR2VuZXJhdG9yLmpzIjsKaW1wb3J0ICJyZWdlbmVyYXRvci1ydW50aW1lL3J1bnRpbWUuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5vYmplY3QudG8tc3RyaW5nLmpzIjsKaW1wb3J0IHJlcXVlc3QgZnJvbSAnQC9wbHVnaW5zL3JlcXVlc3QnOwppbXBvcnQgZ2V0UmVwb3NpdG9yeSBmcm9tICdAL3NlcnZpY2VzJzsKaW1wb3J0IENvb2tpZXMgZnJvbSAnanMtY29va2llJzsKaW1wb3J0IHRyaW0gZnJvbSAnbG9kYXNoL3RyaW0nOwppbXBvcnQgTW9yYWxpcyBmcm9tICdtb3JhbGlzJzsKdmFyIGF1dGhSZXMgPSBnZXRSZXBvc2l0b3J5KCdhdXRoJyk7CnZhciBzZXJ2ZXJVcmwgPSBwcm9jZXNzLmVudi5WVUVfQVBQX0tFWV9TRVJWRVJfVVJMX01PUkFMSVMgfHwgJyc7CnZhciBhcHBJZCA9IHByb2Nlc3MuZW52LlZVRV9BUFBfS0VZX0FQUElEX01PUkFMSVMgfHwgJyc7Ck1vcmFsaXMuc3RhcnQoewogIHNlcnZlclVybDogc2VydmVyVXJsLAogIGFwcElkOiBhcHBJZAp9KTsKdmFyIGFjdGlvbnMgPSB7CiAgbG9naW46IGZ1bmN0aW9uIGxvZ2luKF9yZWYsIGRhdGEpIHsKICAgIHJldHVybiBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUoKSB7CiAgICAgIHZhciBjb21taXQsIHN0YXRlLCByZXN1bHQ7CiAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlJChfY29udGV4dCkgewogICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0LnByZXYgPSBfY29udGV4dC5uZXh0KSB7CiAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICBjb21taXQgPSBfcmVmLmNvbW1pdCwgc3RhdGUgPSBfcmVmLnN0YXRlOwogICAgICAgICAgICAgIF9jb250ZXh0LnByZXYgPSAxOwogICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSA0OwogICAgICAgICAgICAgIHJldHVybiBhdXRoUmVzLmxvZ2luKGRhdGEpOwoKICAgICAgICAgICAgY2FzZSA0OgogICAgICAgICAgICAgIHJlc3VsdCA9IF9jb250ZXh0LnNlbnQ7CiAgICAgICAgICAgICAgY29tbWl0KCdTRVRfVVNFUl9JTkZPJywgcmVzdWx0KTsKICAgICAgICAgICAgICByZXF1ZXN0LmRlZmF1bHRzLmhlYWRlcnMuY29tbW9uWydBdXRob3JpemF0aW9uJ10gPSAiQmVhcmVyICIuY29uY2F0KHJlc3VsdC5hY2Nlc3NUb2tlbik7CiAgICAgICAgICAgICAgQ29va2llcy5zZXQoJ2FjY2Vzc190b2tlbicsIHJlc3VsdC5hY2Nlc3NUb2tlbiwgewogICAgICAgICAgICAgICAgZXhwaXJlczogMQogICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgIENvb2tpZXMuc2V0KCd0eXBlX2xvZ2luJywgJ1dFQicsIHsKICAgICAgICAgICAgICAgIGV4cGlyZXM6IDEKICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gMTE7CiAgICAgICAgICAgICAgcmV0dXJuIE1vcmFsaXMuVXNlci5sb2dPdXQoKTsKCiAgICAgICAgICAgIGNhc2UgMTE6CiAgICAgICAgICAgICAgY29tbWl0KCdTRVRfV0FMTEVUX0FERFJFU1MnLCAnJyk7IC8vIGRvY3VtZW50LmNvb2tpZSA9IGBhY2Nlc3NfdG9rZW49JHtyZXN1bHQuYWNjZXNzVG9rZW59OyBwYXRoPS87IGV4cGlyZXM9MWAKICAgICAgICAgICAgICAvLyBDb29raWVzLnNldCgncmVmcmVzaF90b2tlbicsIHJlc3VsdC5yZWZyZXNoVG9rZW4pCiAgICAgICAgICAgICAgLy8gYXdhaXQgYXBpQWN0aXZpdHkuY3JlYXRlTG9nTG9naW4oeyBzb3VyY2VUeXBlOiAnV0VCJyB9KQoKICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQuYWJydXB0KCJyZXR1cm4iLCBQcm9taXNlLnJlc29sdmUoKSk7CgogICAgICAgICAgICBjYXNlIDE1OgogICAgICAgICAgICAgIF9jb250ZXh0LnByZXYgPSAxNTsKICAgICAgICAgICAgICBfY29udGV4dC50MCA9IF9jb250ZXh0WyJjYXRjaCJdKDEpOwogICAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5hYnJ1cHQoInJldHVybiIsIFByb21pc2UucmVqZWN0KF9jb250ZXh0LnQwKSk7CgogICAgICAgICAgICBjYXNlIDE4OgogICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5zdG9wKCk7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9LCBfY2FsbGVlLCBudWxsLCBbWzEsIDE1XV0pOwogICAgfSkpKCk7CiAgfSwKICByZWZyZXNoVG9rZW46IGZ1bmN0aW9uIHJlZnJlc2hUb2tlbihfcmVmMikgewogICAgcmV0dXJuIF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTIoKSB7CiAgICAgIHZhciBjb21taXQsIHN0YXRlLCBkYXRhLCByZXN1bHQ7CiAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlMiQoX2NvbnRleHQyKSB7CiAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQyLnByZXYgPSBfY29udGV4dDIubmV4dCkgewogICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgY29tbWl0ID0gX3JlZjIuY29tbWl0LCBzdGF0ZSA9IF9yZWYyLnN0YXRlOwogICAgICAgICAgICAgIF9jb250ZXh0Mi5wcmV2ID0gMTsKICAgICAgICAgICAgICBkYXRhID0gewogICAgICAgICAgICAgICAgZW1haWw6IHN0YXRlLnVzZXIudXNlcm5hbWUsCiAgICAgICAgICAgICAgICByZWZyZXNoVG9rZW46IHN0YXRlLnJlZnJlc2hfdG9rZW4KICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgIF9jb250ZXh0Mi5uZXh0ID0gNTsKICAgICAgICAgICAgICByZXR1cm4gYXV0aFJlcy5yZWZyZXNoVG9rZW4oZGF0YSk7CgogICAgICAgICAgICBjYXNlIDU6CiAgICAgICAgICAgICAgcmVzdWx0ID0gX2NvbnRleHQyLnNlbnQ7CgogICAgICAgICAgICAgIGlmICghKCFyZXN1bHQuYWNjZXNzVG9rZW4gfHwgdHJpbShyZXN1bHQuYWNjZXNzVG9rZW4pID09PSAnJykpIHsKICAgICAgICAgICAgICAgIF9jb250ZXh0Mi5uZXh0ID0gODsKICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0Mi5hYnJ1cHQoInJldHVybiIsIFByb21pc2UucmVqZWN0KHsKICAgICAgICAgICAgICAgIGVycjogNDAxLAogICAgICAgICAgICAgICAgbXNnOiAnZXJyJwogICAgICAgICAgICAgIH0pKTsKCiAgICAgICAgICAgIGNhc2UgODoKICAgICAgICAgICAgICBjb21taXQoJ1NFVF9UT0tFTicsIHJlc3VsdCk7CiAgICAgICAgICAgICAgcmVxdWVzdC5kZWZhdWx0cy5oZWFkZXJzLmNvbW1vblsnQXV0aG9yaXphdGlvbiddID0gIkJlYXJlciAiLmNvbmNhdChyZXN1bHQuYWNjZXNzVG9rZW4pOwogICAgICAgICAgICAgIENvb2tpZXMuc2V0KCdhY2Nlc3NfdG9rZW4nLCByZXN1bHQuYWNjZXNzVG9rZW4pOwogICAgICAgICAgICAgIENvb2tpZXMuc2V0KCdyZWZyZXNoX3Rva2VuJywgcmVzdWx0LnJlZnJlc2hUb2tlbik7CiAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0Mi5hYnJ1cHQoInJldHVybiIsIFByb21pc2UucmVzb2x2ZShyZXN1bHQpKTsKCiAgICAgICAgICAgIGNhc2UgMTU6CiAgICAgICAgICAgICAgX2NvbnRleHQyLnByZXYgPSAxNTsKICAgICAgICAgICAgICBfY29udGV4dDIudDAgPSBfY29udGV4dDJbImNhdGNoIl0oMSk7CiAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0Mi5hYnJ1cHQoInJldHVybiIsIFByb21pc2UucmVqZWN0KF9jb250ZXh0Mi50MCkpOwoKICAgICAgICAgICAgY2FzZSAxODoKICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQyLnN0b3AoKTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0sIF9jYWxsZWUyLCBudWxsLCBbWzEsIDE1XV0pOwogICAgfSkpKCk7CiAgfSwKICBsb2dvdXQ6IGZ1bmN0aW9uIGxvZ291dChfcmVmMykgewogICAgdmFyIF9hcmd1bWVudHMgPSBhcmd1bWVudHM7CiAgICByZXR1cm4gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlMygpIHsKICAgICAgdmFyIGNvbW1pdCwgc3RhdHVzOwogICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZTMkKF9jb250ZXh0MykgewogICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0My5wcmV2ID0gX2NvbnRleHQzLm5leHQpIHsKICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgIGNvbW1pdCA9IF9yZWYzLmNvbW1pdDsKICAgICAgICAgICAgICBzdGF0dXMgPSBfYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgX2FyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gX2FyZ3VtZW50c1sxXSA6IHRydWU7CiAgICAgICAgICAgICAgX2NvbnRleHQzLnByZXYgPSAyOwoKICAgICAgICAgICAgICBpZiAoIXN0YXR1cykgewogICAgICAgICAgICAgICAgX2NvbnRleHQzLm5leHQgPSA2OwogICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICBfY29udGV4dDMubmV4dCA9IDY7CiAgICAgICAgICAgICAgcmV0dXJuIGF1dGhSZXMubG9nb3V0KCk7CgogICAgICAgICAgICBjYXNlIDY6CiAgICAgICAgICAgICAgY29tbWl0KCdMT0dfT1VUJyk7CiAgICAgICAgICAgICAgQ29va2llcy5yZW1vdmUoJ2FjY2Vzc190b2tlbicpOwogICAgICAgICAgICAgIENvb2tpZXMucmVtb3ZlKCdyZWZyZXNoX3Rva2VuJyk7CiAgICAgICAgICAgICAgcmVxdWVzdC5kZWZhdWx0cy5oZWFkZXJzLmNvbW1vblsnQXV0aG9yaXphdGlvbiddID0gJyc7CiAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0My5hYnJ1cHQoInJldHVybiIsIFByb21pc2UucmVzb2x2ZSgpKTsKCiAgICAgICAgICAgIGNhc2UgMTM6CiAgICAgICAgICAgICAgX2NvbnRleHQzLnByZXYgPSAxMzsKICAgICAgICAgICAgICBfY29udGV4dDMudDAgPSBfY29udGV4dDNbImNhdGNoIl0oMik7CiAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0My5hYnJ1cHQoInJldHVybiIsIFByb21pc2UucmVqZWN0KF9jb250ZXh0My50MCkpOwoKICAgICAgICAgICAgY2FzZSAxNjoKICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQzLnN0b3AoKTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0sIF9jYWxsZWUzLCBudWxsLCBbWzIsIDEzXV0pOwogICAgfSkpKCk7CiAgfSwKICBnZXRJbmZvOiBmdW5jdGlvbiBnZXRJbmZvKF9yZWY0KSB7CiAgICByZXR1cm4gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlNCgpIHsKICAgICAgdmFyIGNvbW1pdCwgcmVzdWx0OwogICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZTQkKF9jb250ZXh0NCkgewogICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0NC5wcmV2ID0gX2NvbnRleHQ0Lm5leHQpIHsKICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgIGNvbW1pdCA9IF9yZWY0LmNvbW1pdDsKICAgICAgICAgICAgICBfY29udGV4dDQucHJldiA9IDE7CiAgICAgICAgICAgICAgX2NvbnRleHQ0Lm5leHQgPSA0OwogICAgICAgICAgICAgIHJldHVybiBhdXRoUmVzLmdldEluZm8oKTsKCiAgICAgICAgICAgIGNhc2UgNDoKICAgICAgICAgICAgICByZXN1bHQgPSBfY29udGV4dDQuc2VudDsKICAgICAgICAgICAgICBjb21taXQoJ1NFVF9JTkZPJywgcmVzdWx0KTsKICAgICAgICAgICAgICBfY29udGV4dDQubmV4dCA9IDEyOwogICAgICAgICAgICAgIGJyZWFrOwoKICAgICAgICAgICAgY2FzZSA4OgogICAgICAgICAgICAgIF9jb250ZXh0NC5wcmV2ID0gODsKICAgICAgICAgICAgICBfY29udGV4dDQudDAgPSBfY29udGV4dDRbImNhdGNoIl0oMSk7CiAgICAgICAgICAgICAgY29uc29sZS5sb2coJ2xvaSByJywgX2NvbnRleHQ0LnQwLnJlc3BvbnNlKTsKICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQ0LmFicnVwdCgicmV0dXJuIiwgUHJvbWlzZS5yZWplY3QoX2NvbnRleHQ0LnQwKSk7CgogICAgICAgICAgICBjYXNlIDEyOgogICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDQuc3RvcCgpOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfSwgX2NhbGxlZTQsIG51bGwsIFtbMSwgOF1dKTsKICAgIH0pKSgpOwogIH0sCiAgc2V0VG9rZW46IGZ1bmN0aW9uIHNldFRva2VuKF9yZWY1LCBkYXRhKSB7CiAgICB2YXIgY29tbWl0ID0gX3JlZjUuY29tbWl0OwogICAgY29tbWl0KCdTRVRfVE9LRU4nLCBkYXRhKTsKICAgIHJlcXVlc3QuZGVmYXVsdHMuaGVhZGVycy5jb21tb25bJ0F1dGhvcml6YXRpb24nXSA9ICJCZWFyZXIgIi5jb25jYXQoZGF0YS5hY2Nlc3NUb2tlbik7CiAgICBDb29raWVzLnNldCgnYWNjZXNzX3Rva2VuJywgZGF0YS5hY2Nlc3NUb2tlbiwgewogICAgICBleHBpcmVzOiAxCiAgICB9KTsKICAgIENvb2tpZXMuc2V0KCdyZWZyZXNoX3Rva2VuJywgZGF0YS5yZWZyZXNoVG9rZW4pOwogICAgQ29va2llcy5zZXQoJ3R5cGVfbG9naW4nLCAnV0VCJywgewogICAgICBleHBpcmVzOiAxCiAgICB9KTsKICB9LAogIHNldENvbmZpZ01vZHVsZTogZnVuY3Rpb24gc2V0Q29uZmlnTW9kdWxlKF9yZWY2LCBkYXRhKSB7CiAgICByZXR1cm4gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlNSgpIHsKICAgICAgdmFyIGNvbW1pdDsKICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWU1JChfY29udGV4dDUpIHsKICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgc3dpdGNoIChfY29udGV4dDUucHJldiA9IF9jb250ZXh0NS5uZXh0KSB7CiAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICBjb21taXQgPSBfcmVmNi5jb21taXQ7CiAgICAgICAgICAgICAgY29tbWl0KCdTRVRfQ09ORklHX01PRFVMRScsIGRhdGEpOwoKICAgICAgICAgICAgY2FzZSAyOgogICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDUuc3RvcCgpOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfSwgX2NhbGxlZTUpOwogICAgfSkpKCk7CiAgfSwKICBzZXRGZWF0dXJlQ29uZmlnOiBmdW5jdGlvbiBzZXRGZWF0dXJlQ29uZmlnKF9yZWY3LCBkYXRhKSB7CiAgICByZXR1cm4gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlNigpIHsKICAgICAgdmFyIGNvbW1pdDsKICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWU2JChfY29udGV4dDYpIHsKICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgc3dpdGNoIChfY29udGV4dDYucHJldiA9IF9jb250ZXh0Ni5uZXh0KSB7CiAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICBjb21taXQgPSBfcmVmNy5jb21taXQ7CiAgICAgICAgICAgICAgY29tbWl0KCdTRVRfRkVBVFVSRV9DT05GSUcnLCBkYXRhKTsKCiAgICAgICAgICAgIGNhc2UgMjoKICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQ2LnN0b3AoKTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0sIF9jYWxsZWU2KTsKICAgIH0pKSgpOwogIH0sCiAgc2V0U3lzdGVtUGFyYW1zUHVibGljOiBmdW5jdGlvbiBzZXRTeXN0ZW1QYXJhbXNQdWJsaWMoX3JlZjgsIGRhdGEpIHsKICAgIHJldHVybiBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWU3KCkgewogICAgICB2YXIgY29tbWl0OwogICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZTckKF9jb250ZXh0NykgewogICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0Ny5wcmV2ID0gX2NvbnRleHQ3Lm5leHQpIHsKICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgIGNvbW1pdCA9IF9yZWY4LmNvbW1pdDsKICAgICAgICAgICAgICBjb21taXQoJ1NFVF9TWVNURU1fUEFSQU1TX1BVQkxJQycsIGRhdGEpOwoKICAgICAgICAgICAgY2FzZSAyOgogICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDcuc3RvcCgpOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfSwgX2NhbGxlZTcpOwogICAgfSkpKCk7CiAgfSwKICBzZXRUb2tlbkV4dGVybmFsTG9naW46IGZ1bmN0aW9uIHNldFRva2VuRXh0ZXJuYWxMb2dpbihfcmVmOSwgZGF0YSkgewogICAgdmFyIGNvbW1pdCA9IF9yZWY5LmNvbW1pdDsKICAgIGNvbW1pdCgnU0VUX0lORk9fRVhURVJOQUxfTE9HSU4nLCBkYXRhKTsKICAgIHJlcXVlc3QuZGVmYXVsdHMuaGVhZGVycy5jb21tb25bJ0F1dGhvcml6YXRpb24nXSA9ICJCZWFyZXIgIi5jb25jYXQoZGF0YS5hY2Nlc3NUb2tlbik7CiAgICBDb29raWVzLnNldCgnYWNjZXNzX3Rva2VuJywgZGF0YS5hY2Nlc3NUb2tlbik7CiAgICBDb29raWVzLnNldCgndHlwZV9sb2dpbicsICdFWFRFUk5BTCcpOwogIH0sCiAgc2V0VG9rZW5FeHRlcm5hbExvZ2luTW9iaWxlOiBmdW5jdGlvbiBzZXRUb2tlbkV4dGVybmFsTG9naW5Nb2JpbGUoX3JlZjEwLCBkYXRhKSB7CiAgICB2YXIgY29tbWl0ID0gX3JlZjEwLmNvbW1pdDsKICAgIGNvbW1pdCgnU0VUX0lORk9fRVhURVJOQUxfTE9HSU4nLCBkYXRhKTsKICAgIHJlcXVlc3QuZGVmYXVsdHMuaGVhZGVycy5jb21tb25bJ0F1dGhvcml6YXRpb24nXSA9ICJCZWFyZXIgIi5jb25jYXQoZGF0YS5hY2Nlc3NUb2tlbik7CiAgICBDb29raWVzLnNldCgnYWNjZXNzX3Rva2VuJywgZGF0YS5hY2Nlc3NUb2tlbiwgewogICAgICBleHBpcmVzOiAxCiAgICB9KTsKICAgIENvb2tpZXMuc2V0KCd0eXBlX2xvZ2luJywgJ0VYVEVSTkFMJywgewogICAgICBleHBpcmVzOiAxCiAgICB9KTsKICB9Cn07CmV4cG9ydCBkZWZhdWx0IGFjdGlvbnM7"},null]}