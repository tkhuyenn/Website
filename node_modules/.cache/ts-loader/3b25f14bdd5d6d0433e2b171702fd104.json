{"remainingRequest":"D:\\NEU\\CDTT\\frontend\\Website\\node_modules\\babel-loader\\lib\\index.js!D:\\NEU\\CDTT\\frontend\\Website\\node_modules\\ts-loader\\index.js??ref--15-2!D:\\NEU\\CDTT\\frontend\\Website\\node_modules\\cache-loader\\dist\\cjs.js??ref--1-0!D:\\NEU\\CDTT\\frontend\\Website\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\NEU\\CDTT\\frontend\\Website\\src\\modules\\setting\\view\\Kyc.vue?vue&type=script&lang=ts&","dependencies":[{"path":"D:\\NEU\\CDTT\\frontend\\Website\\src\\modules\\setting\\view\\Kyc.vue","mtime":1660123011578},{"path":"D:\\NEU\\CDTT\\frontend\\Website\\babel.config.js","mtime":1660970148265},{"path":"D:\\NEU\\CDTT\\frontend\\Website\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1660970364629},{"path":"D:\\NEU\\CDTT\\frontend\\Website\\node_modules\\babel-loader\\lib\\index.js","mtime":1660970387821},{"path":"D:\\NEU\\CDTT\\frontend\\Website\\node_modules\\ts-loader\\index.js","mtime":1660970390648},{"path":"D:\\NEU\\CDTT\\frontend\\Website\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1660970364629},{"path":"D:\\NEU\\CDTT\\frontend\\Website\\node_modules\\vue-loader\\lib\\index.js","mtime":1660970394220}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["D:\\NEU\\CDTT\\frontend\\Website\\node_modules\\cache-loader\\dist\\cjs.js??ref--1-0!D:\\NEU\\CDTT\\frontend\\Website\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\NEU\\CDTT\\frontend\\Website\\src\\modules\\setting\\view\\Kyc.vue?vue&type=script&lang=ts&"],"names":[],"mappings":"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","sourcesContent":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nimport { Component, Vue, Watch } from 'vue-property-decorator'\nimport getRepository from '@/services'\nimport { SettingRepository } from '@/services/repositories/setting'\nimport UploadRepository from '@/services/repositories/upload'\nimport { AuthRepository } from '@/services/repositories/auth'\nimport filter from 'lodash/filter'\nimport trim from 'lodash/trim'\nimport includes from 'lodash/includes'\n\nimport countryJson from '@/utils/country/index.json'\nimport ParamsRepository from '@/services/repositories/params'\n\nconst apiParams: ParamsRepository = getRepository('params')\nconst api: SettingRepository = getRepository('setting')\n// import UserRepository from '@/services/repositories/user'\nimport { namespace } from 'vuex-class'\n\nconst beBase = namespace('beBase')\n// const apiAuth: AuthRepository = getRepository('auth')\n\nimport findIndex from 'lodash/findIndex'\n\ninterface IListCountry {\n  name: string\n  dial_code: string\n  code: string\n}\n\n@Component\nexport default class BlKyc extends Vue {\n  // @bcAuth.Action('getInfo') getInfo!: () => void\n  @beBase.State('coinMain') coinMain!: string\n\n  api?: SettingRepository\n  apiUpload!: UploadRepository\n  apiAuth!: AuthRepository\n  // apiUser?: UserRepository\n  statusKyc = ''\n  // loading = true\n  linkFake = 'https://avi.edu.vn/wp-content/uploads/2019/11/london-2393098.jpg'\n  dataInput = {\n    idcard: 'ID_CARD',\n    firstName: '',\n    lastName: '',\n    nation: '',\n    idNuidentificationNumbermber: '',\n    nationality: '',\n    identificationNumber: '',\n    userId: '',\n    userGroupId: '',\n    kycRejectReasons: ''\n  }\n  disable = false\n  listCountry: IListCountry[] = countryJson\n  isUpload: any = false\n  file: any\n  public loading = false\n  idPhoto1 = ''\n  idphoto2 = ''\n  selfiePhoto = ''\n  link1 = ''\n  isCard = false\n  isPassport = false\n  isSuccess = false\n  fileList: any = []\n  fileList2: any = []\n  fileList3: any = []\n  srcList: any = ['https://fuss10.elemecdn.com/8/27/f01c15bb73e1ef3793e64e6b7bbccjpeg.jpeg']\n  data: Array<Record<string, any>> = []\n  dataDetail: Record<string, any> = {}\n  dataUpdate: Record<string, any> = {\n    identificationType: '',\n    userId: '',\n    firstName: '',\n    lastName: '',\n    identificationNumber: '',\n    nationality: '',\n    idPhoto1: '',\n    idPhoto2: '',\n    selfiePhoto: ''\n  }\n  isClose = false\n  isStopDbClick = false\n\n  listRejectReason: Record<string, any>[] = []\n\n  listLevel: Record<string, any>[] = []\n  currentLevel: Record<string, any> = {}\n\n  rules: Record<string, any> = {\n    identificationNumber: [\n      {\n        required: true,\n        message: this.$t('settingkyc.wrongidNumber'),\n        trigger: 'blur'\n      }\n    ],\n    nationality: [\n      {\n        required: true,\n        message: this.$t('settingkyc.wrongidNumber'),\n        trigger: 'blur'\n      }\n    ]\n  }\n\n  get getLevelCurrent(): string {\n    const name = this.currentLevel?.groupName || '0'\n    return name.match(/\\d+/)[0]\n  }\n\n  get getNextLevelTotaltrade(): string {\n    const index = findIndex(this.listLevel, elm => elm.id === this.currentLevel.id)\n    return this.$options.filters?.formatNumber(this.listLevel[index + 1].totalTrade)\n  }\n\n  get getCurrentLevelDepositLimit(): any {\n    if (!this.currentLevel.dopositLimit) {\n      return this.$t('settingkyc.unlimited')\n    }\n    return '$' + this.$options.filters?.formatNumber(this.currentLevel.dopositLimit) + this.$t('settingkyc.day')\n  }\n\n  get isMaxLevel(): boolean {\n    const index = findIndex(this.listLevel, elm => elm.id === this.currentLevel.id)\n    return index === this.listLevel.length - 1\n  }\n\n  @Watch('dataInput.idcard', { immediate: false })\n  change(type: string): void {\n    if (type === this.dataDetail.identificationType) {\n      this.fileList = []\n      this.fileList2 = []\n      this.fileList3 = []\n      this.dataInput.identificationNumber = this.dataDetail.identificationNumber\n      this.dataInput.nationality = this.dataDetail.nationality\n      this.idPhoto1 = this.dataDetail.idPhoto1\n      this.idphoto2 = this.dataDetail.idPhoto2\n      this.selfiePhoto = this.dataDetail.selfiePhoto\n    } else {\n      this.fileList = []\n      this.fileList2 = []\n      this.fileList3 = []\n      this.idPhoto1 = ''\n      this.idphoto2 = ''\n      this.selfiePhoto = ''\n      this.dataInput.identificationNumber = ''\n    }\n  }\n\n  handleclose(): void {\n    this.isClose = true\n  }\n\n  HandleReset(): void {\n    if (this.statusKyc == 'REJECTED') {\n      this.checkStatusKyc()\n    } else {\n      this.fileList = []\n      this.fileList2 = []\n      this.fileList3 = []\n      this.idphoto2 = ''\n      this.idPhoto1 = ''\n      this.selfiePhoto = ''\n      this.dataInput.identificationNumber = ''\n      this.dataInput.idcard = 'ID_CARD'\n    }\n  }\n\n  remoteCountry(query: string): void {\n    if (query) {\n      this.listCountry = filter(\n        countryJson,\n        country => trim(country.code).toUpperCase().includes(query.toUpperCase()) || trim(country.name).toUpperCase().includes(query.toUpperCase())\n      )\n      // if (currentCountry.length > 0) {\n      //   this.listCountry = currentCountry\n      // }\n    } else if (!query) {\n      this.listCountry = countryJson\n    }\n  }\n\n  HandleVerify(): void {\n    this.isSuccess = true\n  }\n\n  changeLevel(): void {\n    this.$router.push({ name: 'Quota' })\n  }\n\n  onlyNumber(event: KeyboardEvent): void {\n    let keyCode = event.keyCode ? event.keyCode : event.which\n    //if ((keyCode < 48 || keyCode > 57) && keyCode !== 46) {\n    // 46 is dot\n    if ((keyCode < 48 || keyCode > 57) && keyCode !== 46) {\n      event.preventDefault()\n    }\n    if (keyCode === 46 && includes(this.dataInput.idNuidentificationNumbermber, '.')) {\n      event.preventDefault()\n    }\n  }\n\n  // start upload img1\n  async handleChangeFile(file: Record<string, any>): Promise<void> {\n    // console.log(file)\n\n    if (this.idPhoto1 || this.fileList.length > 0) {\n      this.handleRemove()\n    }\n    // this.handleRemove(file)\n    // eslint-disable-next-line no-constant-condition\n    const formData = new FormData()\n    if (file.status === 'ready') {\n      file.type = file.raw.type\n      // file = {\n      //   ...file,\n      //   load:\n      // }\n      // const newFile: Record<string, any> = {}\n      // newFile.name = file.name\n      // newFile.size = file.raw.size\n      this.fileList.push(file)\n      formData.append('files', file.raw)\n      formData.append('userId', this.dataInput.userId)\n      formData.append('type', this.dataInput.idcard)\n      // formData.append('name', file.name)\n      file.percentage = 1\n      const processFunction = function (progressEvent: any) {\n        let progress = (progressEvent.loaded / progressEvent.total) * 100\n        file.percentage = progress\n      }\n      const data: Record<string, any> = {}\n      data.data = formData\n      // ;(data.type = 'clgt'), (data.userId = 1)\n      data.progress = processFunction\n      const uid = file.uid\n      const result: any = await this.apiUpload.uploadFile(data)\n\n      this.idPhoto1 = result.success[0].url\n      // th\n      const index = findIndex(this.fileList, (item: Record<string, any>) => item.uid === uid)\n      this.fileList[index].url = result.success[0].url\n      this.isUpload = true\n      // this.file.url = URL.createObjectURL(file.raw)\n    }\n    this.resetRotate(0)\n    this.$forceUpdate()\n  }\n\n  //end unload img 1\n\n  // start upload img 2\n  async handleChangeFile2(file: Record<string, any>): Promise<void> {\n    const formData = new FormData()\n    if (file.status === 'ready') {\n      file.type = file.raw.type\n      // file = {\n      //   ...file,\n      //   load:\n      // }\n      // const newFile: Record<string, any> = {}\n      // newFile.name = file.name\n      // newFile.size = file.raw.size\n      this.fileList2.push(file)\n      formData.append('files', file.raw)\n      formData.append('userId', this.dataInput.userId)\n      formData.append('type', this.dataInput.idcard)\n      // formData.append('name', file.name)\n      file.percentage = 1\n      const processFunction = function (progressEvent: any) {\n        let progress = (progressEvent.loaded / progressEvent.total) * 100\n        file.percentage = progress\n      }\n      const data: Record<string, any> = {}\n      data.data = formData\n      // ;(data.type = 'clgt'), (data.userId = 1)\n      data.progress = processFunction\n      const uid = file.uid\n      const result: any = await this.apiUpload.uploadFile(data)\n      this.idphoto2 = result.success[0].url\n      const index = findIndex(this.fileList2, (item: Record<string, any>) => item.uid === uid)\n      this.fileList2[index].url = result.success[0].url\n    }\n    this.resetRotate(1)\n    this.$forceUpdate()\n  }\n\n  resetRotate(id: number): void {\n    this.rotateDeg[id] = 0\n  }\n\n  //end upload img 2\n  async handleChange(): Promise<void> {\n    if (this.isStopDbClick) {\n      return\n    }\n    this.isStopDbClick = true\n    if (\n      this.idPhoto1 == null ||\n      this.idphoto2 == null ||\n      this.selfiePhoto == null ||\n      this.idPhoto1 == '' ||\n      this.idphoto2 == '' ||\n      this.selfiePhoto == '' ||\n      this.dataInput.identificationNumber == null ||\n      this.dataInput.identificationNumber == ''\n    ) {\n      let message: any = ''\n      message = this.$t('settingkyc.validatePhoto')\n      this.$message.error({ message, duration: 5000 })\n      setTimeout(() => {\n        this.isStopDbClick = false\n      }, 1000)\n    } else {\n      const params = {\n        identificationType: this.dataInput.idcard,\n        userId: this.dataInput.userId,\n        firstName: this.dataInput.firstName,\n        lastName: this.dataInput.lastName,\n        identificationNumber: this.dataInput.identificationNumber,\n        nationality: this.dataInput.nationality,\n        idPhoto1: this.idPhoto1,\n        idPhoto2: this.idphoto2,\n        selfiePhoto: this.selfiePhoto,\n        rotateSelfiePhoto: `rotate(${this.rotateDeg[2]}deg)`,\n        rotatePhoto2: `rotate(${this.rotateDeg[1]}deg)`,\n        rotatePhoto1: `rotate(${this.rotateDeg[0]}deg)`\n      }\n      const formData = new FormData()\n      this.loading = true\n      formData.append('file', this.file)\n      if (this.file) {\n        await this.api\n          ?.updateKyc(params)\n          .then(res => {\n            this.dataDetail = res\n            this.$message.success('Lưu thành công')\n            setTimeout(() => {\n              this.isStopDbClick = false\n            }, 1000)\n          })\n          .catch(() => {\n            // this.form.avatar = this.user.avatar\n            this.isStopDbClick = false\n            this.$message.warning('Lưu thất bại')\n          })\n      }\n      //update reject\n      if (this.statusKyc === 'REJECTED') {\n        // console.log('data', this.dataInput)\n\n        // await this.updateProfile()\n        const data = {\n          // ...this.dataInput,\n          ...this.updateUser,\n          ...this.dataInput,\n          idPhoto1: this.idPhoto1,\n          idPhoto2: this.idphoto2,\n          selfiePhoto: this.selfiePhoto,\n          identificationNumber: this.dataInput.identificationNumber,\n          identificationType: this.dataInput.idcard,\n          nationality: this.dataInput.nationality,\n          rotateSelfiePhoto: `rotate(${this.rotateDeg[2]}deg)`,\n          rotatePhoto2: `rotate(${this.rotateDeg[1]}deg)`,\n          rotatePhoto1: `rotate(${this.rotateDeg[0]}deg)`\n        }\n        this.api\n          ?.updateKycReject(data)\n          .then(() => {\n            this.statusKyc = 'PENDING'\n            setTimeout(() => {\n              this.isStopDbClick = false\n            }, 1000)\n          })\n          .catch(() => {\n            this.isStopDbClick = false\n          })\n      }\n      this.loading = false\n      this.isUpload = false\n    }\n  }\n\n  //start upload3\n  async handleChangeFile3(file: Record<string, any>): Promise<void> {\n    const formData = new FormData()\n    if (file.status === 'ready') {\n      file.type = file.raw.type\n      this.fileList3.push(file)\n      formData.append('files', file.raw)\n      formData.append('userId', this.dataInput.userId)\n      formData.append('type', this.dataInput.idcard)\n      // formData.append('name', file.name)\n      file.percentage = 1\n      const processFunction = function (progressEvent: any) {\n        let progress = (progressEvent.loaded / progressEvent.total) * 100\n        file.percentage = progress\n      }\n      const data: Record<string, any> = {}\n      data.data = formData\n      // ;(data.type = 'clgt'), (data.userId = 1)\n      data.progress = processFunction\n      const uid = file.uid\n      const result: any = await this.apiUpload.uploadFile(data)\n      this.selfiePhoto = result.success[0].url\n      const index = findIndex(this.fileList3, (item: Record<string, any>) => item.uid === uid)\n      this.fileList3[index].url = result.success[0].url\n    }\n    this.resetRotate(2)\n    this.$forceUpdate()\n  }\n\n  handleRemove(): void {\n    this.idPhoto1 = ''\n    this.fileList = []\n  }\n\n  handleRemove2(): void {\n    this.idphoto2 = ''\n    this.fileList = []\n  }\n\n  handleRemove3(): void {\n    this.selfiePhoto = ''\n    this.fileList = []\n  }\n\n  // end upload 3\n  updateUser: Record<string, any> = {}\n\n  getUser(): void {\n    this.apiAuth\n      ?.getInfo()\n      .then((res: any) => {\n        this.dataInput = {\n          ...this.dataInput,\n          ...res\n        }\n        this.updateUser = res\n        // this.query.total = res.data\n        this.checkStatusKyc()\n      })\n      .catch(e => {\n        console.log(e)\n      })\n  }\n\n  photo1 = ''\n\n  async checkStatusKyc(): Promise<void> {\n    const param = {\n      userId: this.dataInput.userId\n    }\n    const result = await this.api?.checkStatusKyc(param)\n    this.statusKyc = result.data\n    if (this.statusKyc == 'REJECTED') {\n      const typeReject = await apiParams.getTypeReject({ type: 'KYC_REJECT_REASON' })\n\n      const result = await this.api?.getDetailKyc(this.dataInput.userId)\n\n      this.dataDetail = result.data\n      this.idPhoto1 = this.dataDetail.idPhoto1\n      this.idphoto2 = this.dataDetail.idPhoto2\n      this.selfiePhoto = this.dataDetail.selfiePhoto\n      this.dataInput.idcard = result.data.identificationType\n      this.dataInput = { ...this.dataInput, ...this.dataDetail }\n      this.rotateDeg = {\n        0: parseInt(this.dataDetail.rotatePhoto1.replace(/[^0-9]/g, '')),\n        1: parseInt(this.dataDetail.rotatePhoto2.replace(/[^0-9]/g, '')),\n        2: parseInt(this.dataDetail.rotateSelfiePhoto.replace(/[^0-9]/g, ''))\n      }\n\n      const arrReasonIds = this.dataDetail.kycRejectReasonIds.split(',')\n      this.listRejectReason = arrReasonIds.reduce((prev: any, cur) => {\n        const value = filter(typeReject.content, elm => elm.id == cur)[0]\n        prev.push(value)\n        return prev\n      }, [])\n    }\n    if (this.statusKyc === 'VERIFIED') {\n      this.api?.limitDetails().then(res => {\n        this.listLevel = res\n        this.currentLevel = filter(this.listLevel, level => level.id === this.dataInput.userGroupId)[0]\n      })\n    }\n  }\n\n  dataKYC = {\n    type: this.dataInput.idcard,\n    // rfrId= this.dataUser.rfrId,\n    // firstName= this.dataUser.firstName,\n    // lastName= this.dataUser.lastName,\n    identificationNumber: '',\n    nationality: '',\n    idPhoto1: '',\n    idPhoto2: '',\n    selfiePhoto: ''\n  }\n  countryCode = ''\n  country = ''\n  dataDetailProfile: any = {}\n\n  async getproFile(): Promise<void> {\n    await api.getProfile().then((res: any) => {\n      this.dataDetailProfile = res.data\n      this.country = res.data.country\n      this.countryCode = res.data.countryCode\n    })\n  }\n\n  async handleCreate(): Promise<any> {\n    if (this.isStopDbClick) {\n      return\n    }\n    this.isStopDbClick = true\n    if (\n      this.idPhoto1 == null ||\n      this.idphoto2 == null ||\n      this.selfiePhoto == null ||\n      this.idPhoto1 == '' ||\n      this.idphoto2 == '' ||\n      this.selfiePhoto == '' ||\n      this.dataInput.identificationNumber == null ||\n      this.dataInput.identificationNumber == '' ||\n      this.dataInput.nationality == '' ||\n      this.dataInput.nationality == null\n    ) {\n      let message: any = ''\n      message = this.$t('settingkyc.validatePhoto')\n      this.$message.error({ message, duration: 5000 })\n      setTimeout(() => {\n        this.isStopDbClick = false\n      }, 1000)\n    } else {\n      // await this.updateProfile()\n      const params = {\n        // nationality: this.dataInput.nationality,\n        ...this.updateUser,\n        idPhoto1: this.idPhoto1,\n        idPhoto2: this.idphoto2,\n        selfiePhoto: this.selfiePhoto,\n        nationality: this.dataInput.nationality,\n        identificationType: this.dataInput.idcard,\n        userId: this.dataInput.userId,\n        firstName: this.dataInput.firstName,\n        lastName: this.dataInput.lastName,\n        rotateSelfiePhoto: `rotate(${this.rotateDeg[2]}deg)`,\n        rotatePhoto2: `rotate(${this.rotateDeg[1]}deg)`,\n        rotatePhoto1: `rotate(${this.rotateDeg[0]}deg)`,\n        identificationNumber: this.dataInput.identificationNumber\n      }\n      this.api\n        ?.CreateDataKyc(params)\n        .then(() => {\n          let message: any = ''\n          message = this.$t('settingkyc.updateSuccess')\n          this.$message.success(message)\n          this.statusKyc == 'PENDING'\n          setTimeout(() => {\n            this.isStopDbClick = false\n          }, 1000)\n          // this.updateProfile()\n          setTimeout(() => {\n            this.getUser()\n          }, 1000)\n        })\n        .catch(error => {\n          // if (error.errorCode === 500 && error.message === 'Mã chương trình đã tồn tại') {\n          //   this.$message.error(error.message)\n          // }\n          this.isStopDbClick = false\n          console.log(error)\n        })\n    }\n  }\n\n  form: Record<string, any> = {\n    email: '',\n    firstName: '',\n    lastName: '',\n    confirm: false,\n    id: '',\n    avatar: '',\n    displayName: '',\n    birthday: '',\n    address: '',\n    cityName: '',\n    stateName: '',\n    country: '',\n    nationality: ''\n  }\n\n  updateProfile(): void {\n    delete this.updateUser.roles\n    const params = {\n      // email: this.updateUser.email,\n      // firstName: this.dataInput.firstName,\n      // lastName: this.dataInput.lastName,\n      // confirm: false,\n      // id: this.updateUser.userId,\n      // avatar: this.updateUser.avatar,\n      // displayName: this.updateUser.displayName,\n      // birthday: '',\n      // address: this.updateUser.address,\n      // cityName: this.updateUser.cityName,\n      // stateName: this.updateUser.stateName,\n      // country: this.country,\n      // countryCode: this.countryCode,\n      ...this.dataDetailProfile,\n      nationality: this.dataInput.nationality\n    }\n    console.log('params', params)\n    this.api\n      ?.updateProfile(params)\n      .then(res => {\n        console.log(res)\n      })\n      .catch(err => {\n        console.log(err)\n      })\n  }\n\n  //rotate image 0:idPhoto1,1:idPhoto2,2:idPhotoSelfie\n  rotateDeg = {\n    0: 0,\n    1: 0,\n    2: 0\n  }\n\n  // function rotate image\n  rotateRightImage(id: number): void {\n    if (this.rotateDeg[id] < 270) {\n      this.rotateDeg[id] += 90\n    } else {\n      this.rotateDeg[id] = 0\n    }\n  }\n\n  created(): void {\n    this.api = getRepository('setting')\n    this.apiUpload = getRepository('upload')\n    this.apiAuth = getRepository('auth')\n  }\n\n  mounted(): void {\n    this.getUser()\n    this.getproFile()\n    // this.form = { ...this.user }\n  }\n}\n"],"sourceRoot":""}]}