{"remainingRequest":"D:\\NEU\\CDTT\\frontend\\Website\\node_modules\\babel-loader\\lib\\index.js!D:\\NEU\\CDTT\\frontend\\Website\\node_modules\\ts-loader\\index.js??ref--15-2!D:\\NEU\\CDTT\\frontend\\Website\\node_modules\\eslint-loader\\index.js??ref--14-0!D:\\NEU\\CDTT\\frontend\\Website\\src\\services\\repositories\\wallet\\index.ts","dependencies":[{"path":"D:\\NEU\\CDTT\\frontend\\Website\\src\\services\\repositories\\wallet\\index.ts","mtime":1660970151785},{"path":"D:\\NEU\\CDTT\\frontend\\Website\\babel.config.js","mtime":1660970148265},{"path":"D:\\NEU\\CDTT\\frontend\\Website\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1660970364629},{"path":"D:\\NEU\\CDTT\\frontend\\Website\\node_modules\\babel-loader\\lib\\index.js","mtime":1660970387821},{"path":"D:\\NEU\\CDTT\\frontend\\Website\\node_modules\\ts-loader\\index.js","mtime":1660970390648},{"path":"D:\\NEU\\CDTT\\frontend\\Website\\node_modules\\eslint-loader\\index.js","mtime":1660970366946}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["D:\\NEU\\CDTT\\frontend\\Website\\node_modules\\eslint-loader\\index.js??ref--14-0!D:\\NEU\\CDTT\\frontend\\Website\\src\\services\\repositories\\wallet\\index.ts"],"names":[],"mappings":"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","sourcesContent":["import request from '@/plugins/request'\r\nimport { BaseRepository } from '@/services/base'\r\n\r\nexport default class WalletRepository extends BaseRepository {\r\n  constructor() {\r\n    super('main/api/v1')\r\n  }\r\n\r\n  async getMyWallet(params?: Record<string, any>): Promise<any> {\r\n    try {\r\n      const rs = await request.get(`${this.prefix}/user/asset/my-wallets`, { params })\r\n      return Promise.resolve(rs.data.data)\r\n    } catch (error) {\r\n      return Promise.reject(error)\r\n    }\r\n  }\r\n\r\n  async getExchangeRate(): Promise<any> {\r\n    try {\r\n      const rs = await request.get(`${this.prefix}/exchange-rates`)\r\n      return Promise.resolve(rs.data.data)\r\n    } catch (error) {\r\n      return Promise.reject(error)\r\n    }\r\n  }\r\n  async getLynInfo(lyn: string): Promise<any> {\r\n    try {\r\n      const rs = await request.get(`main/api/v2/transfer/${lyn}/info`)\r\n      return Promise.resolve(rs.data.data)\r\n    } catch (error) {\r\n      return Promise.reject(error)\r\n    }\r\n  }\r\n  async register(data: Record<string, any>, captcha: string): Promise<any> {\r\n    try {\r\n      const rs = await request.post(`${this.prefix}/register`, data, {\r\n        headers: {\r\n          'captcha-response': captcha\r\n        }\r\n      })\r\n      return Promise.resolve(rs.data)\r\n    } catch (error) {\r\n      console.log(error)\r\n      return Promise.reject(error)\r\n    }\r\n  }\r\n  async buyLyn(params: Record<string, any>): Promise<any> {\r\n    try {\r\n      const result = await request.post(`${this.prefix}/crowdsales/buy`, params)\r\n      return Promise.resolve(result)\r\n    } catch (error) {\r\n      return Promise.reject(error)\r\n    }\r\n  }\r\n  async getListTransaction(params: Record<string, any>): Promise<any> {\r\n    try {\r\n      const rs = await request.get(`${this.prefix}/user/asset/account-transaction`, { params })\r\n      return Promise.resolve(rs.data.data)\r\n    } catch (error) {\r\n      return Promise.reject(error)\r\n    }\r\n  }\r\n  async validateLyn(lyn: string, data?: Record<string, any>): Promise<any> {\r\n    try {\r\n      const rs = await request.post(`main/api/v3/transfer/${lyn}/validate`, { ...data, validateSinglePart: true })\r\n      return Promise.resolve(rs.data.data)\r\n    } catch (error) {\r\n      return Promise.reject(error)\r\n    }\r\n  }\r\n  async validateLynV2(lyn: string, data?: Record<string, any>): Promise<any> {\r\n    try {\r\n      const rs = await request.post(`main/api/v2/transfer/${lyn}/validate`, { ...data, validateSinglePart: true })\r\n      return Promise.resolve(rs.data.data)\r\n    } catch (error) {\r\n      return Promise.reject(error)\r\n    }\r\n  }\r\n\r\n  async getExchangeRateTwoCoin(source: string, target: string): Promise<any> {\r\n    try {\r\n      const rs = await request.get(`${this.prefix}/exchange-rates/exchange/${source}/${target}`)\r\n      return Promise.resolve(rs.data.data)\r\n    } catch (error) {\r\n      return Promise.reject(error)\r\n    }\r\n  }\r\n  async verificatySendcode(): Promise<any> {\r\n    try {\r\n      const result = await request.post(`${this.prefix}/transfer/sendcode`)\r\n      return Promise.resolve(result.data.data)\r\n    } catch (error) {\r\n      return Promise.reject(error)\r\n    }\r\n  }\r\n  async transferLyn(lyn: string, data?: Record<string, any>): Promise<any> {\r\n    try {\r\n      const result = await request.post(`${this.prefix}/transfer/${lyn}`, data)\r\n      return Promise.resolve(result.data.data)\r\n    } catch (error) {\r\n      return Promise.reject(error)\r\n    }\r\n  }\r\n\r\n  //\r\n\r\n  async getDataWithdraw(source: string): Promise<any> {\r\n    try {\r\n      const result = await request.get(`main/api/v2/withdraw/${source}/info`)\r\n      return Promise.resolve(result.data.data)\r\n    } catch (error) {\r\n      return Promise.reject(error)\r\n    }\r\n  }\r\n  async sendCodeWithdraw(): Promise<any> {\r\n    try {\r\n      const result = await request.post(`${this.prefix}/withdraw/sendcode`)\r\n      return Promise.resolve(result.data.data)\r\n    } catch (error) {\r\n      return Promise.reject(error)\r\n    }\r\n  }\r\n  async validateTransaction(type: string, currency: string, data: Record<string, any>): Promise<any> {\r\n    try {\r\n      const result = await request.post(`main/api/v3/${type}/${currency}/validate`, { ...data, validateSinglePart: false })\r\n      return Promise.resolve(result.data.data)\r\n    } catch (error) {\r\n      return Promise.reject(error)\r\n    }\r\n  }\r\n  async validateTransactionTransfer(type: string, currency: string, data: Record<string, any>): Promise<any> {\r\n    try {\r\n      const result = await request.post(`main/api/v2/${type}/${currency}/validate`, { ...data, validateSinglePart: false })\r\n      return Promise.resolve(result.data.data)\r\n    } catch (error) {\r\n      return Promise.reject(error)\r\n    }\r\n  }\r\n  async verifyTransaction(type: string, currency: string, data: Record<string, any>): Promise<any> {\r\n    try {\r\n      const result = await request.post(`main/api/v3/${type.toLowerCase()}/${currency.toLowerCase()}`, data)\r\n      return Promise.resolve(result.data.data)\r\n    } catch (error) {\r\n      return Promise.reject(error)\r\n    }\r\n  }\r\n  async verifyTransactionTransfer(type: string, currency: string, data: Record<string, any>): Promise<any> {\r\n    try {\r\n      const result = await request.post(`main/api/v2/${type.toLowerCase()}/${currency.toLowerCase()}`, data)\r\n      return Promise.resolve(result.data.data)\r\n    } catch (error) {\r\n      return Promise.reject(error)\r\n    }\r\n  }\r\n  async withdrawLyn(source: string, data?: Record<string, any>): Promise<any> {\r\n    try {\r\n      const result = await request.post(`${this.prefix}/withdraw/${source}`, data)\r\n      return Promise.resolve(result.data.data)\r\n    } catch (error) {\r\n      return Promise.reject(error)\r\n    }\r\n  }\r\n  async getListNetWorkUSDT(): Promise<Record<string, any>[]> {\r\n    try {\r\n      const result = await request.get(`${this.prefix}/user/asset-network`)\r\n      return Promise.resolve(result.data.data)\r\n    } catch (error) {\r\n      return Promise.reject(error)\r\n    }\r\n  }\r\n  async getInfoVesting(params?: Record<string, any>): Promise<Record<string, any>> {\r\n    try {\r\n      const result = await request.get(`${this.prefix}/vesting`, { params })\r\n      return Promise.resolve(result.data.data)\r\n    } catch (error) {\r\n      return Promise.reject(error)\r\n    }\r\n  }\r\n  async getListRoundCrowdsale(): Promise<Record<string, any>[]> {\r\n    try {\r\n      const result = await request.get(`${this.prefix}/crowdsales`)\r\n      return Promise.resolve(result.data.data)\r\n    } catch (error) {\r\n      return Promise.reject(error)\r\n    }\r\n  }\r\n  async getDetailTransaction(params?: Record<string, any>): Promise<Record<string, any>> {\r\n    try {\r\n      const result = await request.get(`${this.prefix}/transaction`, { params })\r\n      return Promise.resolve(result.data.data)\r\n    } catch (error) {\r\n      return Promise.reject(error)\r\n    }\r\n  }\r\n}\r\n"],"sourceRoot":""}]}