{"remainingRequest":"D:\\NEU\\CDTT\\frontend\\Website\\node_modules\\babel-loader\\lib\\index.js!D:\\NEU\\CDTT\\frontend\\Website\\node_modules\\ts-loader\\index.js??ref--15-2!D:\\NEU\\CDTT\\frontend\\Website\\node_modules\\eslint-loader\\index.js??ref--14-0!D:\\NEU\\CDTT\\frontend\\Website\\src\\mixins\\onchain.ts","dependencies":[{"path":"D:\\NEU\\CDTT\\frontend\\Website\\src\\mixins\\onchain.ts","mtime":1660970150807},{"path":"D:\\NEU\\CDTT\\frontend\\Website\\babel.config.js","mtime":1660970148265},{"path":"D:\\NEU\\CDTT\\frontend\\Website\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1660970364629},{"path":"D:\\NEU\\CDTT\\frontend\\Website\\node_modules\\babel-loader\\lib\\index.js","mtime":1660970387821},{"path":"D:\\NEU\\CDTT\\frontend\\Website\\node_modules\\ts-loader\\index.js","mtime":1660970390648},{"path":"D:\\NEU\\CDTT\\frontend\\Website\\node_modules\\eslint-loader\\index.js","mtime":1660970366946}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["D:\\NEU\\CDTT\\frontend\\Website\\node_modules\\eslint-loader\\index.js??ref--14-0!D:\\NEU\\CDTT\\frontend\\Website\\src\\mixins\\onchain.ts"],"names":[],"mappings":"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","sourcesContent":["import { Component, Mixins } from 'vue-property-decorator'\r\nimport PopupMixin from '@/mixins/popup'\r\n\r\nimport { namespace } from 'vuex-class'\r\n\r\nconst bcAuth = namespace('beAuth')\r\nconst bcNft = namespace('bcNft')\r\nconst beBase = namespace('beBase')\r\n\r\nimport getRepository from '@/services/index'\r\nimport NftRepository from '@/services/repositories/nft'\r\nimport NftRepositoryV2 from '@/services/repositories/nftv2'\r\nimport NftRepositoryV3 from '@/services/repositories/nftv3'\r\nconst apiNft: NftRepository = getRepository('nft')\r\nconst apiNftV2: NftRepositoryV2 = getRepository('nftv2')\r\nconst apiNftV3: NftRepositoryV3 = getRepository('nftv3')\r\n\r\nimport Moralis from 'moralis'\r\n\r\nimport md5 from 'md5'\r\nimport Cookies from 'js-cookie'\r\nimport filter from 'lodash/filter'\r\n\r\nimport includes from 'lodash/includes'\r\n\r\nimport WalletConnectProvider from '@walletconnect/web3-provider'\r\nimport Web3 from 'web3'\r\n\r\n@Component({\r\n  components: {}\r\n})\r\nexport default class OnChainMixin extends Mixins(PopupMixin) {\r\n  [x: string]: any\r\n  @bcAuth.Action('setTokenExternalLogin') setTokenExternalLogin!: (data: Record<string, any>) => void\r\n  @bcAuth.Action('setTokenExternalLoginMobile') setTokenExternalLoginMobile!: (data: Record<string, any>) => void\r\n  @bcAuth.Getter('isLogin') isLogin!: boolean\r\n  @bcAuth.Mutation('SET_WALLET_ADDRESS') setWalletAddress!: (address: string) => void\r\n\r\n  @bcNft.Action('setInfoActivity') setInfoActivity!: (info: Record<string, any>) => void\r\n  @bcAuth.State('walletAddress') walletAddress!: string\r\n  @bcAuth.State('user') user!: Record<string, any>\r\n  @bcNft.State('listNftAsset') listNftAssetOnChain!: Array<Record<string, any>>\r\n  @bcNft.State('statusApproveAccount') statusApproveAccount!: string\r\n  @bcNft.Mutation('SET_TYPE_OF_ACTION') setTypeOfAction!: (type: string) => void\r\n  @bcNft.State('listAssetNetwork') listAssetNetwork!: Array<Record<string, any>>\r\n  @bcNft.State('currencySelectBuy') currencySelectBuy!: string\r\n\r\n  @bcNft.Mutation('SET_IS_ALREADY_APPROVE') setStatusAlreadyApprove!: (status: boolean) => void\r\n  @bcNft.Mutation('SET_STATUS_APPROVE_ITEM') setStatusApproveItem!: (status: string) => void\r\n  @bcNft.Mutation('SET_TRANSACTION_CODE_ITEM') setTransactionCodeItem!: (code: string) => void\r\n  @bcNft.State('listAcceptCurrency') listAcceptCurrency!: Array<Record<string, any>>\r\n  @bcNft.State('listAcceptCurrencyBuy') listAcceptCurrencyBuy!: Array<Record<string, any>>\r\n  @bcNft.State('tokenNeedGetBalance') tokenNeedGetBalance!: string\r\n  @bcNft.State('isDesktop') isDesktop!: boolean\r\n  @bcNft.State('providerWc') providerWc!: WalletConnectProvider\r\n  @bcNft.Mutation('SET_PROVIDER_WALLET_CONNECT') setProviderWalletConnect!: (provider: WalletConnectProvider) => void\r\n\r\n  // khi lần đầu approve, sẽ watch thay đổi status + check thêm dkien isAlreadyApprove\r\n  @bcNft.State('isAlreadyApprove') isAlreadyApprove!: boolean\r\n\r\n  @beBase.State('coinMain') coinMain!: string\r\n  @bcAuth.Getter('isShowCheckboxAccept') isShowCheckboxAccept!: boolean\r\n\r\n  address = ''\r\n  refApproveAccount: any = null\r\n\r\n  isLoading = false\r\n  isOpenPopup = false\r\n  isClickConfirm = false\r\n\r\n  chaiId = ''\r\n\r\n  checkedAccept = false\r\n\r\n  //term cac popup\r\n  get getTerm(): string {\r\n    if (this.systemParamsPublic.length) {\r\n      const param = filter(this.systemParamsPublic, param => param.key === 'system.marketplace.terms.and.conditions')\r\n      return (param[0] && param[0].value) || ''\r\n    }\r\n    return ''\r\n  }\r\n\r\n  get contractAddressExchange(): any {\r\n    if (!this.isLogin) {\r\n      const contract = filter(this.listNftAssetOnChain, elm => elm.type === 'EXCHANGE' && elm.isSystem && elm.baseCurrency === this.nftItem.baseCurrency)\r\n      return contract.length ? contract[0].contractAddress : ''\r\n    }\r\n    return ''\r\n  }\r\n\r\n  async getAbiCode(currency: string, addressContract?: string): Promise<any> {\r\n    try {\r\n      const type = includes(['USDC', 'USDT', 'CLM', 'LYNK', 'ETH'], currency) ? 'ETH' : 'BNB'\r\n      const contractAddress = addressContract ? addressContract : this.getContractAddressToGetAbiCode(currency)\r\n\r\n      const resultAbi = await apiNft.getAbiContract(\r\n        {\r\n          module: 'contract',\r\n          action: 'getabi',\r\n          address: contractAddress,\r\n          apikey: 'B17VBNBDA4EMUUT63JB5HT976WUSC8S55B'\r\n        },\r\n        type\r\n      )\r\n      const abi = JSON.parse(resultAbi)\r\n      return Promise.resolve(abi)\r\n    } catch (error) {\r\n      return Promise.reject(error)\r\n    }\r\n  }\r\n\r\n  async getBalance(contractAddress: string, currency: string): Promise<any> {\r\n    try {\r\n      const networkName = includes(['USDC', 'USDT', 'CLM', 'LYNK', 'ETH'], currency) ? process.env.VUE_APP_NETWORK_NAME_ETH : process.env.VUE_APP_NETWORK_NAME_BNB\r\n      await Moralis.enableWeb3()\r\n      if (currency === 'ETH' || currency === 'BNB') {\r\n        const options = {\r\n          chain: networkName,\r\n          address: this.walletAddress\r\n        }\r\n        //@ts-ignore\r\n        const balance = await Moralis.Web3API.account.getNativeBalance(options)\r\n        return Promise.resolve(Number(Moralis.Units.FromWei(balance.balance)))\r\n      }\r\n\r\n      const options = {\r\n        chain: networkName,\r\n        address: this.walletAddress\r\n      }\r\n      //@ts-ignore\r\n      const resultAll = await Moralis.Web3API.account.getTokenBalances(options)\r\n\r\n      const token = filter(resultAll, elm => elm.token_address === contractAddress.toLowerCase())\r\n\r\n      if (token.length) {\r\n        return Promise.resolve(Number(token[0].balance) / Math.pow(10, Number(token[0].decimals)))\r\n      }\r\n      return Promise.resolve(0)\r\n\r\n      // if (currency === 'ETH' || currency === 'BNB') {\r\n      //   const options = {\r\n      //     chain: 'ropsten',\r\n      //     address: this.walletAddress\r\n      //   }\r\n      //   //@ts-ignore\r\n      //   const balance = await Moralis.Web3API.account.getNativeBalance(options)\r\n      //   return Number(Moralis.Units.FromWei(balance.balance))\r\n      // } else {\r\n      //   const abi = await this.getAbiCode(contractAddress, currency)\r\n\r\n      //   const functionBalanceOf = filter(abi, elm => elm.name === 'balanceOf')[0]\r\n      //   const nameParamsBalanceOf = functionBalanceOf.inputs[0].name\r\n\r\n      //   const params = { [nameParamsBalanceOf]: this.walletAddress }\r\n      //   const readOptions = {\r\n      //     contractAddress,\r\n      //     functionName: 'balanceOf',\r\n      //     abi,\r\n      //     params\r\n      //   }\r\n      //   console.log('readOptions', readOptions)\r\n\r\n      //   const balances = await Moralis.executeFunction(readOptions)\r\n\r\n      //   const decimal = this.$options.filters?.getDecimalsToken(currency)\r\n      //   console.log('balances', (balances['_hex'], 16) / Math.pow(10, decimal))\r\n      //   return parseInt(balances['_hex'], 16) / Math.pow(10, decimal)\r\n      // }\r\n    } catch (error: any) {\r\n      if (error.message === 'Non ethereum enabled browser') {\r\n        const message = this.$t('notify.install-metamask') as string\r\n        this.$message.error({ message, duration: 5000 })\r\n      }\r\n      return Promise.reject(error)\r\n    }\r\n  }\r\n\r\n  async actionWhenLogged(itemNft: Record<string, any>, contractAddress: string, type: 'bid' | 'buy' | 'offer', ownerId?: number): Promise<void> {\r\n    const isExitsToken = Cookies.get('access_token') || ''\r\n    //mạng ropsten\r\n    // if (!isExitsToken) {\r\n    //   await this.handleLoginExternal()\r\n    // }\r\n    let balance = 0\r\n\r\n    if (type === 'buy') {\r\n      balance = await this.getBalance(this.getContractAddressOfCurrency(this.currencySelectBuy), this.currencySelectBuy)\r\n    } else {\r\n      balance = await this.getBalance(this.getContractAddressOfCurrency(this.tokenNeedGetBalance), this.tokenNeedGetBalance)\r\n    }\r\n\r\n    const params = {\r\n      listingId: itemNft?.minListingId,\r\n      itemId: type === 'offer' ? itemNft.id : null,\r\n      ownerId: type === 'offer' ? ownerId : null\r\n    }\r\n    const infoActivity = await apiNft.getLynkeyInfo(itemNft.currency, params)\r\n\r\n    if (\r\n      type !== 'buy' &&\r\n      this.$route.name !== 'DetailNftItem' &&\r\n      infoActivity.myOfferStatus !== 'SUCCESS' &&\r\n      infoActivity.myOfferStatus !== 'FAILED' &&\r\n      infoActivity.myOfferStatus !== null\r\n    ) {\r\n      const message = itemNft.itemName + ' ' + this.$t('notify.transaction-is-pending')\r\n      this.$message.error({ message, duration: 5000 })\r\n      return\r\n    }\r\n    await this.setInfoActivity({ ...infoActivity, available: balance })\r\n    if (type === 'buy') {\r\n      this.setOpenPopup({\r\n        popupName: 'popup-buy-nft',\r\n        isOpen: true\r\n      })\r\n    }\r\n    if (type === 'bid') {\r\n      this.setOpenPopup({\r\n        popupName: 'popup-place-bid',\r\n        isOpen: true\r\n      })\r\n    }\r\n    if (type === 'offer') {\r\n      this.setOpenPopup({\r\n        popupName: 'popup-make-offer',\r\n        isOpen: true\r\n      })\r\n    }\r\n  }\r\n\r\n  // async handleLoginExternal(): Promise<void> {\r\n  //   try {\r\n  //     const KEY = process.env.VUE_APP_KEY_EXTERNAL\r\n  //     const credential = this.$options.filters?.encryptPassword(md5(this.address + KEY))\r\n\r\n  //     const result = await apiNft.externalLogin({\r\n  //       walletType: 'METAMASK',\r\n  //       address: this.address,\r\n  //       credential\r\n  //     })\r\n  //     this.setTokenExternalLogin(result)\r\n  //     return Promise.resolve()\r\n  //   } catch (error) {\r\n  //     return Promise.reject()\r\n  //   }\r\n  // }\r\n\r\n  getContractAddressToGetAbiCode(currency: string): string {\r\n    if (this.listAssetNetwork.length) {\r\n      const token = filter(this.listAssetNetwork, token => token.currency === currency)[0]\r\n      if (Object.prototype.hasOwnProperty.call(token, 'implementAddress')) {\r\n        return token.implementAddress\r\n      }\r\n      return token?.contractAddress || ''\r\n    }\r\n    return ''\r\n  }\r\n\r\n  getContractAddressOfCurrency(currency: string): string {\r\n    if (this.listAssetNetwork.length) {\r\n      const token = filter(this.listAssetNetwork, token => token.currency === currency)[0]\r\n      return token?.contractAddress || ''\r\n    }\r\n    return ''\r\n  }\r\n\r\n  async getAllowance(ownerAddress: string, currency: string): Promise<Record<string, any>> {\r\n    try {\r\n      await Moralis.enableWeb3()\r\n      const contractAddress = this.getContractAddressOfCurrency(currency)\r\n\r\n      let abi: Array<Record<string, any>> = []\r\n\r\n      abi = await this.getAbiCode(currency)\r\n\r\n      const functionAllowance = filter(abi, elm => elm.name === 'allowance')[0]\r\n      const nameParamsOwner = functionAllowance.inputs[0].name\r\n      const nameParamsSpender = functionAllowance.inputs[1].name\r\n\r\n      const params = {\r\n        [nameParamsOwner]: ownerAddress,\r\n        [nameParamsSpender]: this.contractAddressExchange\r\n      }\r\n\r\n      const readOptions = {\r\n        contractAddress,\r\n        functionName: 'allowance',\r\n        abi,\r\n        params\r\n      }\r\n      const allowance = await Moralis.executeFunction(readOptions)\r\n      const decimal = this.$options.filters?.getDecimalsToken(currency)\r\n      const data = {\r\n        allowance: parseInt(allowance['_hex'], 16) / Math.pow(10, decimal),\r\n        abi\r\n      }\r\n      return data\r\n    } catch (error) {\r\n      return Promise.reject(error)\r\n    }\r\n  }\r\n\r\n  async setApprovalForAll(contractAddress: string, spenderWallet: string, currency: string): Promise<any> {\r\n    try {\r\n      await Moralis.enableWeb3()\r\n      console.log('setApprovalForAll')\r\n\r\n      const abi = await this.getAbiCode(currency, contractAddress)\r\n      console.log(abi)\r\n\r\n      const params = {\r\n        operators: [spenderWallet, this.contractAddressExchange],\r\n        approved: true\r\n      }\r\n      const readOptions = {\r\n        contractAddress,\r\n        functionName: 'setBatchApprovalForAll',\r\n        abi,\r\n        params\r\n      }\r\n      console.log(readOptions)\r\n\r\n      const transaction = await Moralis.executeFunction(readOptions)\r\n      this.isClickConfirm = true\r\n      this.setStatusAlreadyApprove(true)\r\n      return Promise.resolve(transaction)\r\n    } catch (error) {\r\n      this.isLoading = false\r\n      console.log(error)\r\n    }\r\n  }\r\n\r\n  async putOnSaleOnChain(body: Record<string, any>, contractAddress: string, spenderWallet: string, popupName: string, currency: string): Promise<any> {\r\n    try {\r\n      if (this.statusApproveAccount === 'NONE' || this.statusApproveAccount === 'FAILED') {\r\n        const transaction = await this.setApprovalForAll(contractAddress, spenderWallet, currency)\r\n        await apiNft.validateApprove({}, { hash: transaction.hash, itemId: body.itemId })\r\n      }\r\n      if (this.statusApproveAccount === 'SUCCESS') {\r\n        await apiNftV3.fixedPrice(body)\r\n        this.isLoading = false\r\n        this.setOpenPopup({\r\n          popupName,\r\n          isOpen: false\r\n        })\r\n        const emitValue = popupName === 'popup-fixed-price' ? 'put-fixed' : popupName === 'popup-open-for-bids' ? 'put-open' : 'put-time'\r\n        this.$emit('success', emitValue)\r\n        return Promise.resolve()\r\n      }\r\n    } catch (error) {\r\n      console.log(error)\r\n      return Promise.reject(error)\r\n    }\r\n  }\r\n\r\n  async acceptOfferOnchain(body: Record<string, any>, contractAddress: string, spenderWallet: string, popupName: string, currency: string, itemId?: number): Promise<void> {\r\n    try {\r\n      if (this.statusApproveAccount === 'NONE' || this.statusApproveAccount === 'FAILED') {\r\n        const transaction = await this.setApprovalForAll(contractAddress, spenderWallet, currency)\r\n        await apiNft.validateApprove({}, { hash: transaction.hash, itemId })\r\n      }\r\n      if (this.statusApproveAccount === 'SUCCESS') {\r\n        await apiNftV3.postAcceptOffer(body)\r\n        this.isLoading = false\r\n        this.setOpenPopup({\r\n          popupName,\r\n          isOpen: false\r\n        })\r\n        this.setTypeOfAction('offer-accept')\r\n        this.setOpenPopup({\r\n          popupName: 'popup-notify-success',\r\n          isOpen: true\r\n        })\r\n      }\r\n    } catch (error) {\r\n      return Promise.reject(error)\r\n    }\r\n  }\r\n\r\n  async approveExchangeSpendTokenOfUser(\r\n    currency: string,\r\n    oldAmount: number,\r\n    amount: number,\r\n    type: 'bid-add' | 'bid-edit' | 'bid-cancel' | 'offer-make' | 'offer-edit' | 'offer-cancel'\r\n  ): Promise<any> {\r\n    try {\r\n      const result = await this.getAllowance(this.walletAddress, currency)\r\n\r\n      // eslint-disable-next-line prefer-const\r\n      let { allowance, abi } = result\r\n      if (type === 'bid-add' || type === 'offer-make') {\r\n        allowance += amount\r\n      }\r\n      if (type === 'bid-edit' || type === 'offer-edit') {\r\n        allowance = allowance - oldAmount + amount\r\n      }\r\n      if (type === 'bid-cancel' || type === 'offer-cancel') {\r\n        allowance -= amount\r\n      }\r\n      console.log('allowance', allowance)\r\n\r\n      const decimal = this.$options.filters?.getDecimalsToken(currency)\r\n\r\n      const functionApprove = filter(abi, elm => elm.name === 'approve')[0]\r\n      const nameParamsSpender = functionApprove.inputs[0].name\r\n      const nameParamsAmount = functionApprove.inputs[1].name\r\n\r\n      const params = {\r\n        [nameParamsSpender]: this.contractAddressExchange,\r\n        [nameParamsAmount]:\r\n          currency === 'BNB' || currency === 'BUSD' ? Math.floor((allowance * Math.pow(10, decimal + 1)) / 10).toString() : Math.floor((allowance * Math.pow(10, decimal + 1)) / 10)\r\n      }\r\n\r\n      const contractAddress = this.getContractAddressOfCurrency(currency)\r\n\r\n      const writeOptions = {\r\n        contractAddress,\r\n        functionName: 'approve',\r\n        abi,\r\n        params\r\n      }\r\n      console.log('writeOptions', writeOptions)\r\n\r\n      const transaction = await Moralis.executeFunction(writeOptions)\r\n      console.log(transaction)\r\n      this.setTransactionCodeItem(transaction.hash)\r\n      return Promise.resolve(transaction.hash)\r\n    } catch (error) {\r\n      return Promise.reject(error)\r\n    }\r\n  }\r\n  async switchNetwork(baseCurrency: string): Promise<void> {\r\n    try {\r\n      await Moralis.enableWeb3()\r\n      const chainIdNetWork = await this.getChainId()\r\n      // let chainId = ''\r\n      if (baseCurrency === 'ETH' && chainIdNetWork !== process.env.VUE_APP_CHAIN_ETH) {\r\n        // chainId = process.env.VUE_APP_CHAIN_ETH as string\r\n        // await Moralis.switchNetwork(chainId)\r\n\r\n        // return\r\n\r\n        const networkName = process.env.VUE_APP_SWITCH_NETWORK_NAME_ETH\r\n        const message = this.$t('notify_switch-network', { network: networkName }) as string\r\n        this.$message.error({ message, duration: 5000 })\r\n        return Promise.reject({ code: 5888 })\r\n      }\r\n      if (baseCurrency === 'BNB' && chainIdNetWork !== process.env.VUE_APP_CHAIN_BNB) {\r\n        // chainId = process.env.VUE_APP_CHAIN_BNB as string\r\n        // await Moralis.switchNetwork(chainId)\r\n        // return\r\n        const networkName = process.env.VUE_APP_SWITCH_NETWORK_NAME_BNB\r\n        const message = this.$t('notify_switch-network', { network: networkName }) as string\r\n        this.$message.error({ message, duration: 5000 })\r\n        return Promise.reject({ code: 5888 })\r\n      }\r\n      return Promise.resolve()\r\n      // const balance = await this.getBalance(this.getContractAddressOfCurrency(this.currencySelectBuy), this.currencySelectBuy)\r\n      // console.log(balance)\r\n    } catch (error: any) {\r\n      console.log(error)\r\n      // if (error.code === 4902) {\r\n      //   //@ts-ignore\r\n      //   await window.ethereum.request({\r\n      //     method: 'wallet_addEthereumChain',\r\n      //     params: [\r\n      //       {\r\n      //         chainId: '0x61',\r\n      //         chainName: 'Binance Smart Chain Testnet',\r\n      //         nativeCurrency: {\r\n      //           name: 'BNB',\r\n      //           symbol: 'BNB',\r\n      //           decimals: 18\r\n      //         },\r\n      //         rpcUrls: ['https://data-seed-prebsc-1-s1.binance.org:8545'],\r\n      //         blockExplorerUrls: ['https://testnet.bscscan.com']\r\n      //       }\r\n      //     ]\r\n      //   })\r\n      //   await this.switchNetwork(baseCurrency)\r\n      // }\r\n      return Promise.reject(error)\r\n    }\r\n  }\r\n\r\n  async getChainId(): Promise<string | any> {\r\n    try {\r\n      await Moralis.enableWeb3()\r\n      const chainId = await Moralis.chainId\r\n      return Promise.resolve(chainId)\r\n    } catch (error) {\r\n      console.log(error)\r\n      return Promise.reject(error)\r\n    }\r\n  }\r\n\r\n  // Code phần wallet connect mobile\r\n\r\n  async enableWeb3Provider(): Promise<WalletConnectProvider> {\r\n    //  Create WalletConnect Provider\r\n    const provider = new WalletConnectProvider({\r\n      rpc: {\r\n        97: 'https://nd-406-881-551.p2pify.com/315129e28d1858397753ab2c06e23fc5',\r\n        3: 'https://nd-910-981-089.p2pify.com/bca35fb26ea8a7972e8be644bc8f6e26'\r\n      },\r\n      // infuraId: '9aa3d95b3bc440fa88ea12eaa4456161',\r\n      qrcodeModalOptions: {\r\n        // mobileLinks: ['rainbow', 'metamask', 'argent', 'trust', 'imtoken', 'pillar']\r\n        mobileLinks: ['metamask']\r\n      }\r\n    })\r\n\r\n    return provider\r\n  }\r\n\r\n  async autoConnect(): Promise<void> {\r\n    try {\r\n      const isWalletConnect = localStorage.getItem('walletconnect')\r\n\r\n      if (isWalletConnect) {\r\n        const provider = await this.enableWeb3Provider()\r\n\r\n        await provider.enable()\r\n\r\n        //@ts-ignore\r\n        const web3 = new Web3(provider)\r\n\r\n        const account = await web3.eth.getAccounts()\r\n\r\n        this.setWalletAddress(account[0])\r\n\r\n        this.setProviderWalletConnect(provider)\r\n      }\r\n    } catch (error) {\r\n      console.log(error)\r\n    }\r\n  }\r\n\r\n  async disconnectWc(): Promise<void> {\r\n    try {\r\n      await this.providerWc.disconnect()\r\n      console.log('disconnect')\r\n      return Promise.resolve()\r\n    } catch (error) {\r\n      console.log(error)\r\n    }\r\n  }\r\n}\r\n"],"sourceRoot":""}]}